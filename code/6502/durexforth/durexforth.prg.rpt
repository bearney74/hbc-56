
; ******** Source: durexforth.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; ACME assembler
    24                          
    25                          !cpu 6502
    26                          !to "durexforth.prg", cbm	; set output file and format
    27                          

; ******** Source: hbc56kernel.inc
     1                          ; 6502 - HBC-56 Kernel Include file for user code
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: kernel.o.lmap
     1                          	HBC56_RST_VECTOR	= $f0cb	; ?
     2                          	AY_ENV_SHAPE_SAW1	= $8	; unused
     3                          	tmsConsoleBackspace	= $e9ca	; ?
     4                          	NES_RAM_SIZE	= $1
     5                          	UART_ZP_START	= $28
     6                          	TMS_LT_RED	= $9	; unused
     7                          	UART_STATUS_RCVR_OVERRUN	= $20	; unused
     8                          	HBC56_TMP	= $7ca2
     9                          	KB_SCANCODE_ESC	= $76	; unused
    10                          	AY_ENV_SHAPE_SAW2	= $c	; unused
    11                          	TMS_GFX_TILE_WIDTH	= $8
    12                          	LCD_RAM_END	= $7b58
    13                          	TMS_SPRITE_SIZE	= $8
    14                          	KB_SCANCODE_ARROW_RIGHT	= $f4	; unused
    15                          	KB_CAPS_LOCK	= $8
    16                          	KB_EXT_KEY	= $e0
    17                          	VIA_RAM_SIZE	= $1
    18                          	HBC56_VSYNC_CALLBACK	= $7cb9
    19                          	isLower	= $e000
    20                          	TMS_R1_SPRITE_MAG2	= $1	; unused
    21                          	KB_BUFFER_MASK	= $f
    22                          	KB_SCANCODE_SLASH_FORWARD	= $4a	; unused
    23                          	AY_PORTB	= $f	; unused
    24                          	TMS_R1_RAM_16K	= $80
    25                          	AY_PORTA	= $e	; unused
    26                          	TMS_R1_SPRITE_MAG1	= $0	; unused
    27                          	TMS_FPS	= $3c
    28                          	kbInit	= $eaa2
    29                          	VIA_TMP	= $7c58	; unused
    30                          	tmsSetAddressNextRow	= $e586	; unused
    31                          	UART_IRQ_BIT	= $4
    32                          	tmsModeText	= $e644	; unused
    33                          	VIA_REG_IFR	= $d
    34                          	_tmsSendKb	= $e6a7	; unused
    35                          	UART_STATUS_RX_REG_FULL	= $1
    36                          	tmsReg1SetFields	= $e5e5
    37                          	BITMAP_ZP_START	= $1e
    38                          	JMP_OPCODE	= $4c
    39                          	hbc56IntHandler	= $f044
    40                          	TILEMAP_RAM_START	= $7a00
    41                          	KB_SCANCODE_SCROLL_LOCK	= $7e	; unused
    42                          	KB_RAM_END	= $7c9c
    43                          	AY_ENV_SHAPE_HOLD	= $1
    44                          	TMS_R0_MODE_GRAPHICS_II	= $2
    45                          	KB_SHIFT_LEFT_MAP_BYTE	= $2
    46                          	VIA_IO_ADDR_IFR	= $7ffd	; unused
    47                          	VIA_IO_ADDR_T1C_H	= $7ff5	; unused
    48                          	MEMORY_ZP_END	= $32
    49                          	TMS_R1_SPRITE_8	= $0	; unused
    50                          	VIA_REG_T1L_H	= $7
    51                          	KB_SCANCODE_PRTSCR	= $92	; unused
    52                          	KB_SCANCODE_SLASH_BACK	= $5d	; unused
    53                          	VIA_IO_ADDR_T1C_L	= $7ff4	; unused
    54                          	AY_WRITE	= $1
    55                          	UART_STATUS_CARRIER_DETECT	= $4	; unused
    56                          	VIA_REG_T1L_L	= $6
    57                          	KB_PRESSED_MAP	= $7c76
    58                          	TMS9918_ZP_START	= $24
    59                          	tmsDecPosConsole	= $e8c4
    60                          	UART_CTL_WORD_8BIT_1SB	= $14	; unused
    61                          	HBC56_CONSOLE_FLAG_LCD	= $20	; unused
    62                          	TMS_CYAN	= $7
    63                          	HBC56_TITLE	= $ed5e
    64                          	memcpyMultiPage	= $e0bf	; unused
    65                          	KB_SCANCODE_NUM_LOCK	= $77	; unused
    66                          	TILEMAP_RAM_END	= $7b16
    67                          	VIA_DIR_OUTPUT	= $ff	; unused
    68                          	KB_BUFFER_TAIL	= $7c65
    69                          	tmsSetRegister	= $e5bc
    70                          	hbc56Tms9918Int	= $f075	; ?
    71                          	KB_SCANCODE_NUMPAD_ENTER	= $da	; unused
    72                          	UART_STATUS_TX_REG_EMPTY	= $2
    73                          	UART_RX_BUFFER_XOFF_SIZE	= $c0
    74                          	KB_FLAGS	= $7c5c
    75                          	HBC56_NMI_VECTOR	= $7e04
    76                          	KB_SCANCODE_SQUARE_LEFT	= $54	; unused
    77                          	BITMAP_ZP_END	= $24
    78                          	UART_CTL_CLOCK_DIV_64	= $2
    79                          	toUpper	= $e06b	; unused
    80                          	VIA_IO_ADDR	= $7ff0
    81                          	tableBitsFromLeft	= $e150	; unused
    82                          	NES_TMP	= $7c9c	; unused
    83                          	HBC56_META_TITLE_END	= $7cb7
    84                          	uartFlowCtrlXoff	= $ea2b	; ?
    85                          	SFXMAN_RAM_START	= $7c59
    86                          	uartInWait	= $ea34
    87                          	uartOutString	= $ea78	; unused
    88                          	RTI_OPCODE	= $40
    89                          	KB_SCANCODE_PAGE_UP	= $fd	; unused
    90                          	AY_ENV_SHAPE_FADE_OUT	= $9	; unused
    91                          	TMS_VRAM_SPRITE_ATTR_ADDRESS	= $3b00
    92                          	NOTE_FREQ_AS8	= 7458.619999999999890860635787248611	; unused
    93                          	HBC56_TMP_Y	= $7ca5
    94                          	KB_SCANCODE_TILDE	= $e	; unused
    95                          	HBC56_TITLE_LEN	= $1a
    96                          	UART_IO_PORT	= $20
    97                          	TMS9918_RAM_END	= $7b58
    98                          	AY_S0_ADDR	= $7f40	; unused
    99                          	TMS9918_ZP_SIZE	= $2
   100                          	HBC56_TMP_X	= $7ca4
   101                          	NOTE_FREQ_AS5	= 932.330000000000040927261579781771	; unused
   102                          	TMS_MED_GREEN	= $2	; unused
   103                          	TMS_WHITE	= $f
   104                          	KB_SCANCODE_WINDOWS_RIGHT	= $a7	; unused
   105                          	HBC56_KERNEL_ZP_END	= $36
   106                          	AY_S1_WRITE	= $7f45	; unused
   107                          	NOTE_FREQ_AS4	= 466.160000000000025011104298755527	; unused
   108                          	VIA_REG_DDR_B	= $2
   109                          	NOTE_FREQ_AS7	= 3729.309999999999945430317893624306	; unused
   110                          	TMS_TMP_ADDRESS	= $24
   111                          	KB_SCANCODE_PERIOD	= $49	; unused
   112                          	VIA_REG_DDR_A	= $3
   113                          	tableBitFromLeft	= $e130
   114                          	NOTE_FREQ_AS6	= 1864.660000000000081854523159563541	; unused
   115                          	AY_NOISE_GEN	= $6	; unused
   116                          	NOTE_FREQ_AS1	= 58.270000000000003126388037344441	; unused
   117                          	AY_S0_WRITE	= $7f41	; unused
   118                          	NOTE_FREQ_AS0	= 29.140000000000000568434188608080	; unused
   119                          	tmsSetAddressRead	= $e5a8
   120                          	VIA_RAM_START	= $7c58
   121                          	NOTE_FREQ_AS3	= 233.080000000000012505552149377763	; unused
   122                          	UART_RX_BUFFER_TAIL	= $29
   123                          	tmsSetPatternRead	= $e941	; unused
   124                          	AY_S1_ADDR	= $7f44	; unused
   125                          	NOTE_FREQ_AS2	= 116.540000000000006252776074688882	; unused
   126                          	UART_RX_BUFFER	= $7b58
   127                          	TMS_R1_SPRITE_16	= $2	; unused
   128                          	TMS_GFX_PIXELS_Y	= $c0	; unused
   129                          	TMS_GFX_PIXELS_X	= $100	; unused
   130                          	KB_SCANCODE_NUMPAD_MULTIPLY	= $7c	; unused
   131                          	HBC56_DISABLE_SFXMAN	= $1
   132                          	tmsSetAddressWrite	= $e592
   133                          	TMS_MAGENTA	= $d	; unused
   134                          	LCD_IO_PORT	= $2	; unused
   135                          	tmsConsoleScrollLine	= $e82f
   136                          	KB_SCANCODE_CTRL_RIGHT	= $94	; unused
   137                          	_tmsSendEmptyPage	= $e6e6
   138                          	KB_BUFFER_SIZE	= $10
   139                          	KB_SCANCODE_COMMA	= $41	; unused
   140                          	HBC56_TITLE_TEXT	= $ed5e
   141                          	AY_R10	= $a
   142                          	AY_IO_PORT	= $40
   143                          	AY_R11	= $b
   144                          	NES_LEFT	= $2	; unused
   145                          	AY_R12	= $c
   146                          	TMS_R1_DISP_BLANK	= $0	; unused
   147                          	KB_NUM_LOCK	= $10	; unused
   148                          	hbc56LogoPatt	= $ede0
   149                          	kernelMain	= $f0cb	; ?
   150                          	AY_R13	= $d
   151                          	hbc56LogoPattEnd	= $ef58	; unused
   152                          	ASCII_CR	= $d	; unused
   153                          	AY_R14	= $e
   154                          	KB_SCANCODE_PAGE_DOWN	= $fa	; unused
   155                          	kbIntHandler	= $eadd
   156                          	IO_PORT_BASE_ADDRESS	= $7f00
   157                          	AY_R15	= $f
   158                          	isDigit	= $e01e
   159                          	AY_R16	= $10	; unused
   160                          	HAVE_TMS9918	= $1
   161                          	UART_CTL_MASTER_RESET	= $3
   162                          	AY_R17	= $11	; unused
   163                          	KB_SCANCODE_TAB	= $d	; unused
   164                          	HBC56_KERNEL_ZP_START	= $18
   165                          	TMS9918_IRQ_BIT	= $1
   166                          	HBC56_BORDER	= $4
   167                          	TMS_R1_MODE_MULTICOLOR	= $8
   168                          	TMS_R0_MODE_MULTICOLOR	= $0
   169                          	TMS_DK_BLUE	= $4
   170                          	TMS_VRAM_SPRITE_PATT_ADDRESS	= $1800
   171                          	HBC56_CONSOLE_FLAG_NOWAIT	= $10
   172                          	KB_SCANCODE_ENTER	= $5a	; unused
   173                          	KB_IO_PORT	= $80
   174                          	AY_ENV_SHAPE_ATTACK	= $4
   175                          	UART_STATUS_IRQ	= $80	; unused
   176                          	NES_DOWN	= $4	; unused
   177                          	tmsReg1ClearFields	= $e5ef
   178                          	NES_SELECT	= $20	; unused
   179                          	hbc56Stop	= $f236
   180                          	UART_RX_BUFFER_SIZE	= $100
   181                          	KB_BUFFER	= $7c66
   182                          	DEFAULT_HBC56_NMI_VECTOR	= $ffe0	; unused
   183                          	NES1_IO_ADDR	= $7f82
   184                          	UART_CTL_WORD_7BIT_OPB_1SB	= $c	; unused
   185                          	KB_SCANCODE_NUMPAD_PLUS	= $79	; unused
   186                          	NES2_IO_ADDR	= $7f83
   187                          	BITMAP_RAM_END	= $7b26
   188                          	KB_SCANCODE_F2	= $6	; unused
   189                          	HBC56_TITLE_TEXT_LEN	= $1a
   190                          	NES_UP	= $8	; unused
   191                          	KB_SCANCODE_F3	= $4	; unused
   192                          	VIA_DIR_INPUT	= $0	; unused
   193                          	DELAY_L	= $34
   194                          	TMS_TXT_TILES_X	= $28
   195                          	ASCII_BACKSPACE	= $8	; unused
   196                          	TMS_TXT_TILES_Y	= $18
   197                          	KB_SCANCODE_F1	= $5	; unused
   198                          	KB_SCANCODE_SEMICOLON	= $4c	; unused
   199                          	KB_SCANCODE_F6	= $b	; unused
   200                          	TMS_R1_DISP_ACTIVE	= $40
   201                          	tmsInitColorTable	= $e756
   202                          	KB_SCANCODE_F7	= $83	; unused
   203                          	KB_SCANCODE_HOME	= $ec	; unused
   204                          	DELAY_H	= $35
   205                          	KB_SCANCODE_F4	= $c	; unused
   206                          	tmsSetPosTmpAddress	= $e7ed
   207                          	uartInNoWait	= $ea3e	; unused
   208                          	hbc56Reset	= $f233	; unused
   209                          	KB_SCANCODE_F5	= $3	; unused
   210                          	hbc56CustomDelayMs	= $f239	; unused
   211                          	_tmsWaitReg	= $e582
   212                          	uartOut	= $ea61	; ?
   213                          	KB_TMP_X	= $7c5d
   214                          	KB_SCANCODE_F8	= $a	; unused
   215                          	HBC56_KERNEL_RAM_START	= $7a00
   216                          	KB_TMP_Y	= $7c5e	; unused
   217                          	KB_SCANCODE_F9	= $1	; unused
   218                          	tmsConsolePrint	= $e993	; unused
   219                          	uartIrq	= $e9fc
   220                          	TMS_BLACK	= $1
   221                          	HBC56_META_TITLE	= $7ca6
   222                          	KB_SCANCODE_SQUARE_RIGHT	= $5b	; unused
   223                          	tmsConsoleNewline	= $e9a3	; ?
   224                          	AY_S1	= $7f44
   225                          	NOTE_FREQ_C8	= 4186.010000000000218278728425502777	; unused
   226                          	KB_IRQ_BIT	= $2
   227                          	tmsModeGraphicsII	= $e623	; unused
   228                          	AY_S0	= $7f40
   229                          	NOTE_FREQ_A8	= $1b80	; unused
   230                          	HBC56_TICKS	= $7c9f
   231                          	HBC56_SECONDS_H	= $7ca1
   232                          	memcpySinglePage	= $e0a3	; unused
   233                          	tmsModeGraphicsI	= $e610
   234                          	NOTE_FREQ_G8	= 6271.930000000000291038304567337036	; unused
   235                          	AY_ADDR	= $0
   236                          	NOTE_FREQ_E8	= 5274.039999999999963620211929082870	; unused
   237                          	TMS_R1_RAM_4K	= $0	; unused
   238                          	AY_ENV_SHAPE_ALTERNATE	= $2
   239                          	NOTE_FREQ_DS8	= 4978.029999999999745341483503580093	; unused
   240                          	tmsInitEntireColorTable	= $e754	; ?
   241                          	TMS_GREY	= $e
   242                          	NES_B	= $40	; unused
   243                          	HBC56_SECONDS_L	= $7ca0
   244                          	AY_PSG1	= $4
   245                          	UART_CTL_WORD_7BIT_EPB_1SB	= $8	; unused
   246                          	NES_A	= $80	; unused
   247                          	TMS9918_IO_PORT	= $10
   248                          	UART_RAM_END	= $7c58
   249                          	AY_PSG0	= $0
   250                          	UART_FLOWCTRL_XON	= $11
   251                          	DEFAULT_HBC56_RST_VECTOR	= $8000
   252                          	NOTE_FREQ_C0	= 16.350000000000001421085471520200	; unused
   253                          	NOTE_FREQ_A1	= $37	; unused
   254                          	NOTE_FREQ_G2	= $62	; unused
   255                          	NOTE_FREQ_E3	= 164.810000000000002273736754432321
   256                          	NOTE_FREQ_DS4	= 311.129999999999995452526491135359	; unused
   257                          	KB_SCANCODE_CTRL_LEFT	= $14	; unused
   258                          	NOTE_FREQ_A0	= 27.500000000000000000000000000000	; unused
   259                          	NOTE_FREQ_E2	= 82.409999999999996589394868351519	; unused
   260                          	NOTE_FREQ_DS5	= 622.250000000000000000000000000000	; unused
   261                          	tmsReg0ClearFields	= $e5dd
   262                          	UART_STATUS_CLEAR_TO_SEND	= $8	; unused
   263                          	NOTE_FREQ_G3	= $c4	; unused
   264                          	NOTE_FREQ_C1	= 32.700000000000002842170943040401	; unused
   265                          	NOTE_FREQ_G0	= 24.500000000000000000000000000000	; unused
   266                          	NOTE_FREQ_E1	= 41.200000000000002842170943040401	; unused
   267                          	NOTE_FREQ_DS6	= 1244.509999999999990905052982270718	; unused
   268                          	UART_DATA	= $7f21
   269                          	VIA_IO_ADDR_T2C_H	= $7ff9	; unused
   270                          	NOTE_FREQ_C2	= 65.409999999999996589394868351519	; unused
   271                          	NOTE_FREQ_A3	= $dc	; unused
   272                          	NOTE_FREQ_E0	= 20.600000000000001421085471520200	; unused
   273                          	NOTE_FREQ_DS7	= 2489.019999999999981810105964541435	; unused
   274                          	TMS9918_TMP_BUFFER	= $7b30
   275                          	NOTE_FREQ_G1	= $31	; unused
   276                          	NOTE_FREQ_A2	= $6e	; unused
   277                          	NOTE_FREQ_C3	= 130.810000000000002273736754432321	; unused
   278                          	UART_ZP_END	= $2c
   279                          	NOTE_FREQ_DS0	= 19.449999999999999289457264239900	; unused
   280                          	NOTE_FREQ_C4	= 261.629999999999995452526491135359	; unused
   281                          	NOTE_FREQ_A5	= $370	; unused
   282                          	NOTE_FREQ_G6	= 1567.980000000000018189894035458565	; unused
   283                          	NOTE_FREQ_E7	= 2637.019999999999981810105964541435	; unused
   284                          	NOTE_FREQ_DS1	= 38.890000000000000568434188608080	; unused
   285                          	HAVE_KEYBOARD	= $1
   286                          	NOTE_FREQ_A4	= $1b8	; unused
   287                          	NOTE_FREQ_E6	= 1318.509999999999990905052982270718	; unused
   288                          	hbc56HighBell	= $f1b4	; ?
   289                          	NOTE_FREQ_G7	= 3135.960000000000036379788070917130	; unused
   290                          	NOTE_FREQ_C5	= 523.250000000000000000000000000000	; unused
   291                          	tmsConsoleHome	= $e8e1	; unused
   292                          	NOTE_FREQ_DS2	= 77.780000000000001136868377216160	; unused
   293                          	NOTE_FREQ_G4	= $188	; unused
   294                          	NOTE_FREQ_E5	= 659.250000000000000000000000000000	; unused
   295                          	VIA_IO_ADDR_T2C_L	= $7ff8	; unused
   296                          	NOTE_FREQ_C6	= 1046.500000000000000000000000000000	; unused
   297                          	NOTE_FREQ_A7	= $dc0	; unused
   298                          	BCD_RAM_START	= $7c59
   299                          	HBC56_META_TITLE_MAX_LEN	= $10
   300                          	isDigitX	= $e030	; unused
   301                          	NOTE_FREQ_DS3	= 155.560000000000002273736754432321	; unused
   302                          	NOTE_FREQ_E4	= 329.629999999999995452526491135359	; unused
   303                          	NOTE_FREQ_G5	= 783.990000000000009094947017729282	; unused
   304                          	NOTE_FREQ_A6	= $6e0	; unused
   305                          	NOTE_FREQ_C7	= $82d	; unused
   306                          	VIA_RAM_END	= $7c59
   307                          	AY_INACTIVE	= $3	; unused
   308                          	TMS_SPRITE_SIZE2X	= $10	; unused
   309                          	tmsSetPosWriteText	= $e8fa	; ?
   310                          	KB_SCANCODE_F11	= $78	; unused
   311                          	AY_S0_READ	= $7f42	; unused
   312                          	tmsInitTextTable	= $e739	; ?
   313                          	KB_SCANCODE_F10	= $9	; unused
   314                          	VIA_REG_PORT_A	= $1
   315                          	KB_SCANCODE_NUMPAD_PERIOD	= $71	; unused
   316                          	VIA_REG_PORT_B	= $0
   317                          	KB_SCANCODE_F12	= $7	; unused
   318                          	kbNextScancode	= $ebef
   319                          	KB_SCANCODE_WINDOWS_LEFT	= $9f	; unused
   320                          	BCD_RAM_END	= $7c5c
   321                          	ASCII_RETURN	= $a	; unused
   322                          	TMS_R1_INT_ENABLE	= $20
   323                          	UART_CTL_WORD_8BIT_OPAR_1SB	= $1c	; unused
   324                          	isSpace	= $e049	; unused
   325                          	hbc56BootScreen	= $ef58
   326                          	AY_S1_READ	= $7f46	; unused
   327                          	KB_SCANCODE_END	= $e9	; unused
   328                          	TMS_GFX_TILE_HEIGHT	= $8
   329                          	KB_SCANCODE_SHIFT_RIGHT	= $59
   330                          	TMS_LT_BLUE	= $5	; unused
   331                          	TMS_R0_EXT_VDP_ENABLE	= $1	; unused
   332                          	uartOutNoBsCheck	= $ea67	; ?
   333                          	KB_SCANCODE_ALT_LEFT	= $11	; unused
   334                          	HBC56_INT_VECTOR	= $7e00
   335                          	VIA_REG_IER	= $e
   336                          	tmsIncPosConsole	= $e8a3
   337                          	INT_IO_PORT	= $df
   338                          	KB_PRESSED_MAP_BYTES	= $20
   339                          	VIA_REG_ACR	= $b
   340                          	STR_ADDR_H	= $33
   341                          	NES_RAM_END	= $7c9f
   342                          	memsetSinglePage	= $e101
   343                          	TMS_FONT_DATA	= $e271
   344                          	kbWaitForScancode	= $ebe3
   345                          	tmsReg0SetFields	= $e5d3
   346                          	tmsPrint	= $e947
   347                          	KB_SCANCODE_APOS	= $52	; unused
   348                          	STR_ADDR_L	= $32
   349                          	tmsSetPosConsole	= $e8e7
   350                          	KB_SHIFT_RIGHT_MAP_BYTE	= $b
   351                          	AY_CLOCK_FREQ	= $1e8480
   352                          	tmsSetBackground	= $e5cf
   353                          	TMS_R1_MODE_GRAPHICS_II	= $0
   354                          	UART_RX_BUFFER_XON_SIZE	= $4
   355                          	VIA_IO_ADDR_ACR	= $7ffb	; unused
   356                          	uartFlowCtrlXon	= $ea20	; ?
   357                          	VIA_IO_ADDR_IER	= $7ffe	; unused
   358                          	ASCII_BELL	= $7	; unused
   359                          	BCD_TMP3	= $7c5b
   360                          	TMS_MED_RED	= $8	; unused
   361                          	UART_CTL_WORD_8BIT_EPAR_1SB	= $18	; unused
   362                          	BCD_TMP2	= $7c5a
   363                          	LCD_ZP_END	= $28
   364                          	toLower	= $e073	; unused
   365                          	BCD_TMP1	= $7c59
   366                          	MEM_SRC	= $2e
   367                          	AY_ENABLES	= $7
   368                          	UART_CTL_WORD_7BIT_OPB_2SB	= $4	; unused
   369                          	LCD_RAM_START	= $7b58
   370                          	TMS_LT_GREEN	= $3	; unused
   371                          	_tmsWaitData	= $e579
   372                          	HAVE_MATH_INC	= $1
   373                          	KB_SCANCODE_B	= $32	; unused
   374                          	hbc56Bell	= $f1e6	; unused
   375                          	KB_SCANCODE_C	= $21	; unused
   376                          	TMS_TXT_PIXELS_X	= $f0	; unused
   377                          	HBC56_KERNEL_RAM_SIZE	= $2bd	; unused
   378                          	TMS_TXT_PIXELS_Y	= $c0	; unused
   379                          	KB_SCANCODE_A	= $1c	; unused
   380                          	TMS_GFX_TILES_Y	= $18
   381                          	KB_PRESSED_MAP_SIZE	= $fe	; unused
   382                          	KB_SCANCODE_F	= $2b	; unused
   383                          	kbIsPressed	= $ebc9	; unused
   384                          	TMS_R0_MODE_TEXT	= $0
   385                          	TMS_GFX_TILES_X	= $20
   386                          	KB_SCANCODE_G	= $34	; unused
   387                          	HBC56_DISABLE_LCD	= $1
   388                          	TMS_R0_MODE_GRAPHICS_I	= $0
   389                          	tmsSetSpriteTmpAddress	= $e7e4	; unused
   390                          	KB_CB_RELEASED	= $7c61
   391                          	KB_SCANCODE_D	= $23	; unused
   392                          	TMS_R1_MODE_GRAPHICS_I	= $0
   393                          	KB_SCANCODE_E	= $24	; unused
   394                          	TILEMAP_ZP_START	= $18
   395                          	KB_SHIFT_DOWN	= $1	; unused
   396                          	KB_SCANCODE_J	= $3b	; unused
   397                          	KB_CB_PRESSED	= $7c5f
   398                          	KB_SCANCODE_K	= $42	; unused
   399                          	KB_SHIFT_RIGHT_MAP_BIT	= $40
   400                          	HBC56_CONSOLE_FLAGS	= $7ca3
   401                          	AY_ENV_SHAPE	= $d
   402                          	KB_SCANCODE_H	= $33	; unused
   403                          	kbReadAscii	= $ec4e	; unused
   404                          	KB_BUFFER_HEAD	= $7c64
   405                          	KB_SCANCODE_I	= $43	; unused
   406                          	viaIntHandler	= $ed5b
   407                          	KB_SCANCODE_N	= $31	; unused
   408                          	tmsTileXyAtPixelXy	= $e7aa	; unused
   409                          	UART_CTL_CLOCK_DIV_16	= $1	; unused
   410                          	nesWaitForPress	= $ea85
   411                          	hbc56LogoInd	= $ed9e
   412                          	KB_SCANCODE_O	= $44	; unused
   413                          	memcpyMultiPagePort	= $e0e1	; unused
   414                          	KB_SCANCODE_L	= $4b	; unused
   415                          	bin2bcd8	= $e07b	; unused
   416                          	KB_SCANCODE_M	= $3a	; unused
   417                          	KB_SCANCODE_ARROW_UP	= $f5	; unused
   418                          	UART_RX_BUFFER_HEAD	= $28
   419                          	KB_SCANCODE_R	= $2d	; unused
   420                          	_tmsSendPage	= $e6b0	; ?
   421                          	tmsSetPosWrite	= $e8ed	; unused
   422                          	KB_SCANCODE_S	= $1b	; unused
   423                          	KB_SCANCODE_P	= $4d	; unused
   424                          	TMS_DK_RED	= $6	; unused
   425                          	KB_SCANCODE_Q	= $15	; unused
   426                          	NOTE_FREQ_GS8	= 6644.880000000000109139364212751389	; unused
   427                          	KB_CURRENT_STATE	= $7c63
   428                          	KB_SCANCODE_V	= $2a	; unused
   429                          	NOTE_FREQ_CS8	= 4434.920000000000072759576141834259	; unused
   430                          	KB_SCANCODE_W	= $1d	; unused
   431                          	HBC56_CONSOLE_FLAG_NES	= $40
   432                          	UART_CTL_WORD_7BIT_EPB_2SB	= $0	; unused
   433                          	kbScancodeToAscii	= $ebfe
   434                          	KB_SCANCODE_T	= $2c	; unused
   435                          	KB_SHIFT_LEFT_MAP_BIT	= $20
   436                          	TMS_TRANSPARENT	= $0	; unused
   437                          	KB_SCANCODE_U	= $3c	; unused
   438                          	SFXMAN_RAM_END	= $7c59
   439                          	NOTE_FREQ_GS4	= 415.300000000000011368683772161603	; unused
   440                          	tmsSendBytes	= $e6ea
   441                          	NOTE_FREQ_CS5	= 554.370000000000004547473508864641	; unused
   442                          	VIA_REG_T2C_H	= $9
   443                          	KB_SCANCODE_Z	= $1a	; unused
   444                          	LCD_ZP_START	= $28
   445                          	NOTE_FREQ_CS4	= 277.180000000000006821210263296962	; unused
   446                          	NOTE_FREQ_GS5	= 830.610000000000013642420526593924	; unused
   447                          	KB_SCANCODE_MINUS	= $4e	; unused
   448                          	isUpper	= $e00c
   449                          	TMS_VRAM_NAME_ADDRESS	= $3800
   450                          	UART_IRQ	= $3
   451                          	NES_RAM_START	= $7c9c
   452                          	NOTE_FREQ_GS6	= 1661.220000000000027284841053187847	; unused
   453                          	NOTE_FREQ_CS7	= 2217.460000000000036379788070917130	; unused
   454                          	KB_SCANCODE_X	= $22	; unused
   455                          	KB_SCANCODE_PAUSE	= $e1
   456                          	KB_IO_ADDR	= $7f80
   457                          	memcpySinglePagePort	= $e0b1	; unused
   458                          	NOTE_FREQ_CS6	= 1108.730000000000018189894035458565	; unused
   459                          	NOTE_FREQ_GS7	= 3322.440000000000054569682106375694	; unused
   460                          	TMS_REGISTER_DATA	= $e571
   461                          	TMS_MODEL	= $26be
   462                          	KB_SCANCODE_Y	= $35	; unused
   463                          	NOTE_FREQ_GS0	= 25.960000000000000852651282912120	; unused
   464                          	NOTE_FREQ_CS1	= 34.649999999999998578914528479800	; unused
   465                          	VIA_REG_T2C_L	= $8
   466                          	ROM_BANK_REG	= $8	; unused
   467                          	HBC56_USER_ZP_START	= $36	; unused
   468                          	NOTE_FREQ_CS0	= 17.320000000000000284217094304040	; unused
   469                          	NOTE_FREQ_GS1	= 51.909999999999996589394868351519	; unused
   470                          	UART_CTL_RX_INT_ENABLE	= $80
   471                          	KB_SCANCODE_CAPS_LOCK	= $58
   472                          	tableInvBitFromRight	= $e148	; unused
   473                          	tmsInitPattTable	= $e6f9	; ?
   474                          	TMS9918_IRQ	= $1
   475                          	HBC56_CONSOLE_FLAG_CURSOR	= $80	; unused
   476                          	NOTE_FREQ_GS2	= 103.829999999999998294697434175760	; unused
   477                          	NOTE_FREQ_CS3	= 138.590000000000003410605131648481	; unused
   478                          	tmsModeMulticolor	= $e657	; unused
   479                          	NOTE_FREQ_CS2	= 69.299999999999997157829056959599	; unused
   480                          	NOTE_FREQ_GS3	= 207.650000000000005684341886080801	; unused
   481                          	KB_IRQ	= $2
   482                          	VIA_IO_PORT	= $f0
   483                          	HBC56_VIA_CALLBACK	= $7cbb
   484                          	_tmsSendX8	= $e6b2
   485                          	KB_SCANCODE_NUMPAD_5	= $73	; unused
   486                          	AY_CHA	= $0
   487                          	KB_SCANCODE_ALT_RIGHT_	= $91	; unused
   488                          	KB_SCANCODE_NUMPAD_4	= $6b	; unused
   489                          	AY_CHB	= $1
   490                          	KB_RAM_SIZE	= $3a
   491                          	tmsSetPatternWrite	= $e93b	; unused
   492                          	KB_SCANCODE_NUMPAD_7	= $6c	; unused
   493                          	UART_RAM_START	= $7b58
   494                          	AY_CHC	= $2
   495                          	KB_SCANCODE_NUMPAD_6	= $74	; unused
   496                          	MEMORY_ZP_SIZE	= $6
   497                          	KB_SCANCODE_NUMPAD_1	= $69	; unused
   498                          	KEY_MAP_SHIFTED	= $ecdb	; ?
   499                          	AY_READ	= $2
   500                          	KB_SCANCODE_NUMPAD_0	= $70	; unused
   501                          	KB_SCANCODE_NUMPAD_3	= $7a	; unused
   502                          	HBC56_LOGO	= $4
   503                          	VIA_IRQ	= $5
   504                          	tableBitFromRight	= $e140	; unused
   505                          	KB_SCANCODE_NUMPAD_2	= $72	; unused
   506                          	TMS9918_CONSOLE_LINE_LEN	= $7b2b
   507                          	KB_SCANCODE_NUMPAD_MINUS	= $7b	; unused
   508                          	BITMAP_RAM_START	= $7b16
   509                          	uartInit	= $e9e0	; unused
   510                          	hbc56CustomDelay	= $ffe3
   511                          	UART_STATUS_FRAMING_ERROR	= $10	; unused
   512                          	HBC56_BACKGROUND	= $f
   513                          	AY_ENV_SHAPE_FADE_IN_STOP	= $4	; unused
   514                          	HAVE_UART	= $1
   515                          	MEM_DST	= $2c
   516                          	TMS_DK_YELLOW	= $a	; unused
   517                          	UART_STATUS_PARITY_ERROR	= $40	; unused
   518                          	KB_SCANCODE_NUMPAD_9	= $7d	; unused
   519                          	KB_SCANCODE_NUMPAD_8	= $75	; unused
   520                          	AY_CHN	= $3	; unused
   521                          	AY_ENV_SHAPE_TRIANGLE	= $e	; unused
   522                          	hbc56Delay	= $ffe1
   523                          	tableInvBitFromLeft	= $e138
   524                          	KB_SCANCODE_2	= $1e	; unused
   525                          	AY_CHB_TONE_H	= $3	; unused
   526                          	KB_SCANCODE_3	= $26	; unused
   527                          	kbResetCallbacks	= $eacc	; unused
   528                          	NES_IO_PORT	= $82
   529                          	TMS9918_RAM_SIZE	= $32
   530                          	KB_SCANCODE_0	= $45	; unused
   531                          	TMS9918_RAM_START	= $7b26
   532                          	AY_CHA_TONE_L	= $0
   533                          	AY_CHC_TONE_H	= $5	; unused
   534                          	AY_ENV_SHAPE_CONTINUE	= $8
   535                          	KB_SCANCODE_1	= $16	; unused
   536                          	HBC56_TEXT	= $4
   537                          	HBC56_META_VECTOR	= $dffc
   538                          	cputype	= $65c02	; unused
   539                          	KB_SCANCODE_6	= $36	; unused
   540                          	HBC56_KERNEL_RAM_END	= $7cbd
   541                          	AY_CHB_TONE_L	= $2	; unused
   542                          	KB_SCANCODE_7	= $3d	; unused
   543                          	AY_ENV_SHAPE_FADE_IN	= $d	; unused
   544                          	tmsModeReset	= $e5f7
   545                          	KB_SCANCODE_DELETE	= $f1	; unused
   546                          	KB_SCANCODE_4	= $25	; unused
   547                          	KB_SCANCODE_MENU	= $af	; unused
   548                          	KB_SCANCODE_SPACEBAR	= $29	; unused
   549                          	AY_CHA_TONE_H	= $1
   550                          	AY_CHC_TONE_L	= $4	; unused
   551                          	KB_SCANCODE_5	= $2e	; unused
   552                          	MEMORY_ZP_START	= $2c
   553                          	tmsSetPosRead	= $e900	; unused
   554                          	nes1Pressed	= $ea92	; unused
   555                          	VIA_REG_T1C_H	= $5
   556                          	INT_CTRL_ADDRESS	= $7fdf
   557                          	STR_ADDR	= $32
   558                          	AY_ENV_PERIOD_H	= $c
   559                          	tmsHex8	= $e7b7	; unused
   560                          	VIA_IO_ADDR_T1L_H	= $7ff7	; unused
   561                          	TILEMAP_ZP_END	= $1e
   562                          	KEY_MAP	= $ec5b	; ?
   563                          	KB_SCANCODE_8	= $3e	; unused
   564                          	KB_RAM_START	= $7c5c
   565                          	KB_SCANCODE_9	= $46	; unused
   566                          	VIA_REG_T1C_L	= $4
   567                          	AY_ENV_PERIOD_L	= $b
   568                          	KB_CTRL_DOWN	= $2	; unused
   569                          	KB_PAUSE_KEY	= $e1
   570                          	VIA_IO_ADDR_T1L_L	= $7ff6	; unused
   571                          	NES_RIGHT	= $1	; unused
   572                          	nes2Pressed	= $ea9a	; unused
   573                          	MEM_LEN	= $30
   574                          	VIA_IO_ADDR_PORT_A	= $7ff1	; unused
   575                          	UART_CTL_WORD_8BIT_2SB	= $10
   576                          	NES_START	= $10	; unused
   577                          	HBC56_META_TITLE_LEN	= $7cb8
   578                          	memsetMultiPage	= $e10d	; unused
   579                          	UART_REG	= $7f20
   580                          	LCD_MODEL	= $3240	; unused
   581                          	KB_SCANCODE_SHIFT_LEFT	= $12
   582                          	VIA_IO_ADDR_PORT_B	= $7ff0	; unused
   583                          	isAlNum	= $e02a	; unused
   584                          	AY_CHA_AMPL	= $8
   585                          	LAST_MODULE_RAM_END	= $7c9f
   586                          	TMS_R1_MODE_TEXT	= $10
   587                          	tmsConsoleOut	= $e95a
   588                          	TMS9918_REG	= $7f11
   589                          	KB_SCANCODE_NUMPAD_DIVIDE	= $ca	; unused
   590                          	DEFAULT_HBC56_INT_VECTOR	= $ffe0
   591                          	VIA_IRQ_BIT	= $10
   592                          	TMS_VRAM_PATT_ADDRESS	= $2000
   593                          	KB_SCANCODE_EQUAL	= $55	; unused
   594                          	KB_RELEASE	= $f0
   595                          	tmsInitSpriteTable	= $e775	; ?
   596                          	KB_SCANCODE_ARROW_DOWN	= $f2	; unused
   597                          	UART_RX_BUFFER_BYTES	= $2a
   598                          	isAlpha	= $e018
   599                          	ayInit	= $e158
   600                          	TMS9918_RAM	= $7f10
   601                          	UART_RX_FLAGS	= $2b
   602                          	AY_R1	= $1
   603                          	NOTE_FREQ_B8	= 7902.130000000000109139364212751389	; unused
   604                          	KB_STATUS_ADDR	= $7f81
   605                          	AY_R0	= $0
   606                          	AY_R3	= $3
   607                          	NOTE_FREQ_F8	= 5587.649999999999636202119290828705	; unused
   608                          	AY_R2	= $2
   609                          	NOTE_FREQ_D8	= 4698.630000000000109139364212751389	; unused
   610                          	TMS_DK_GREEN	= $c	; unused
   611                          	AY_R5	= $5
   612                          	AY_CHC_AMPL	= $a	; unused
   613                          	NOTE_FREQ_FS8	= 5919.909999999999854480847716331482	; unused
   614                          	AY_R4	= $4
   615                          	AY_R7	= $7
   616                          	KB_ALT_DOWN	= $4	; unused
   617                          	AY_R6	= $6
   618                          	TMS_TXT_TILE_HEIGHT	= $8
   619                          	AY_R9	= $9
   620                          	NOTE_FREQ_B0	= 30.870000000000000994759830064140	; unused
   621                          	NOTE_FREQ_F2	= 87.310000000000002273736754432321	; unused
   622                          	NOTE_FREQ_D3	= 146.830000000000012505552149377763	; unused
   623                          	NOTE_FREQ_FS4	= 369.990000000000009094947017729282	; unused
   624                          	TMS_VRAM_COLOR_ADDRESS+2	= $0
   625                          	tmsSetPatternTmpAddressBank1	= $e925	; unused
   626                          	VIA_IO_ADDR_DDR_A	= $7ff3	; unused
   627                          	AY_R8	= $8
   628                          	NOTE_FREQ_B1	= 61.740000000000001989519660128281	; unused
   629                          	NOTE_FREQ_D2	= 73.420000000000001705302565824240	; unused
   630                          	NOTE_FREQ_FS5	= 739.990000000000009094947017729282	; unused
   631                          	UART_FLOWCTRL_XOFF	= $13
   632                          	TMS_R0_EXT_VDP_DISABLE	= $0
   633                          	tmsSetPatternTmpAddressBank0	= $e906	; unused
   634                          	NOTE_FREQ_F3	= 174.610000000000013642420526593924	; unused
   635                          	NOTE_FREQ_F0	= 21.829999999999998294697434175760	; unused
   636                          	NOTE_FREQ_D1	= 36.710000000000000852651282912120	; unused
   637                          	NOTE_FREQ_FS6	= 1479.980000000000018189894035458565	; unused
   638                          	TMS9918_CONSOLE_Y	= $7b29
   639                          	TMS_LT_YELLOW	= $b	; unused
   640                          	KB_SCANCODE_ARROW_LEFT	= $eb	; unused
   641                          	NOTE_FREQ_B2	= 123.469999999999998863131622783840	; unused
   642                          	NOTE_FREQ_D0	= 18.350000000000001421085471520200	; unused
   643                          	NOTE_FREQ_FS7	= 2959.960000000000036379788070917130	; unused
   644                          	TMS9918_CONSOLE_X	= $7b28
   645                          	tmsSetPatternTmpAddressBank2	= $e930	; unused
   646                          	VIA_IO_ADDR_DDR_B	= $7ff2	; unused
   647                          	NOTE_FREQ_F1	= 43.649999999999998578914528479800	; unused
   648                          	NOTE_FREQ_B3	= 246.939999999999997726263245567679	; unused
   649                          	HBC56_KERNEL_START	= $e000
   650                          	TMS9918_ZP_END	= $28
   651                          	HAVE_AY3891X	= $1
   652                          	NOTE_FREQ_FS0	= 23.120000000000000994759830064140	; unused
   653                          	TMS_R1_INT_DISABLE	= $0	; unused
   654                          	AY_CHB_AMPL	= $9	; unused
   655                          	NOTE_FREQ_B4	= 493.879999999999995452526491135359	; unused
   656                          	NOTE_FREQ_F6	= 1396.910000000000081854523159563541	; unused
   657                          	NOTE_FREQ_D7	= 2349.320000000000163709046319127083	; unused
   658                          	NOTE_FREQ_FS1	= 46.250000000000000000000000000000	; unused
   659                          	NOTE_FREQ_B5	= 987.769999999999981810105964541435	; unused
   660                          	NOTE_FREQ_D6	= 1174.660000000000081854523159563541	; unused
   661                          	TMS_TXT_TILE_WIDTH	= $6
   662                          	tmsSetPosTmpAddressText	= $e80a
   663                          	tmsSetPatternTmpAddress	= $e906
   664                          	NOTE_FREQ_F7	= 2793.829999999999927240423858165741	; unused
   665                          	NOTE_FREQ_FS2	= 92.500000000000000000000000000000	; unused
   666                          	NOTE_FREQ_F4	= 349.230000000000018189894035458565	; unused
   667                          	NOTE_FREQ_D5	= 587.330000000000040927261579781771	; unused
   668                          	LOGO_BUFFER	= $3000	; unused
   669                          	NOTE_FREQ_B6	= 1975.529999999999972715158946812153	; unused
   670                          	TMS9918_CONSOLE_SIZE_X	= $7b2a
   671                          	KB_SCANCODE_BACKSPACE	= $66	; unused
   672                          	NOTE_FREQ_FS3	= $b9	; unused
   673                          	NOTE_FREQ_D4	= 293.660000000000025011104298755527	; unused
   674                          	tmsInit	= $e665
   675                          	NOTE_FREQ_F5	= 698.460000000000036379788070917130
   676                          	NOTE_FREQ_B7	= 3951.070000000000163709046319127083	; unused
   677                          	KB_SCANCODE_INSERT	= $f0	; unused

; ******** Source: hbc56kernel.inc
    16                          

; ******** Source: ut/math.inc
     1                          ; 6502
     2                          ;
     3                          ; Math macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          HAVE_MATH_INC = 1
    14                          
    15                          !macro lsr2 {
    16                                  lsr
    17                                  lsr
    18                          }
    19                          
    20                          !macro lsr3 {
    21                                  +lsr2
    22                                  lsr
    23                          }
    24                          
    25                          !macro lsr4 {
    26                                  +lsr3
    27                                  lsr
    28                          }
    29                          
    30                          !macro lsr5 {
    31                                  +lsr4
    32                                  lsr
    33                          }
    34                          
    35                          !macro lsr6 {
    36                                  +lsr5
    37                                  lsr
    38                          }
    39                          
    40                          !macro lsr7 {
    41                                  +lsr6
    42                                  lsr
    43                          }
    44                          
    45                          !macro div2   { lsr }
    46                          !macro div4   { +lsr2 }
    47                          !macro div8   { +lsr3 }
    48                          !macro div16  { +lsr4 }
    49                          !macro div32  { +lsr5 }
    50                          !macro div64  { +lsr6 }
    51                          !macro div128 { +lsr7 }
    52                          
    53                          !macro asl2 {
    54                                  asl
    55                                  asl
    56                          }
    57                          
    58                          !macro asl3 {
    59                                  +asl2
    60                                  asl
    61                          }
    62                          
    63                          !macro asl4 {
    64                                  +asl3
    65                                  asl
    66                          }
    67                          
    68                          !macro asl5 {
    69                                  +asl4
    70                                  asl
    71                          }
    72                          
    73                          !macro asl6 {
    74                                  +asl5
    75                                  asl
    76                          }
    77                          
    78                          !macro asl7 {
    79                                  +asl6
    80                                  asl
    81                          }
    82                          
    83                          !macro mul2   { asl }
    84                          !macro mul4   { +asl2 }
    85                          !macro mul8   { +asl3 }
    86                          !macro mul16  { +asl4 }
    87                          !macro mul32  { +asl5 }
    88                          !macro mul64  { +asl6 }
    89                          !macro mul128 { +asl7 }
    90                          
    91                          
    92                          
    93                          ; -----------------------------------------------------------------------------
    94                          ; +dec16: decement a 16-bit value
    95                          ; -----------------------------------------------------------------------------
    96                          ; Inputs:
    97                          ;  addr: address containing LSB of value to decrement
    98                          ; -----------------------------------------------------------------------------
    99                          !macro dec16 .addr {
   100                            lda .addr
   101                            bne +
   102                            dec .addr + 1
   103                          +
   104                            dec .addr
   105                          }
   106                          
   107                          ; -----------------------------------------------------------------------------
   108                          ; +inc16: increment a 16-bit value
   109                          ; -----------------------------------------------------------------------------
   110                          ; Inputs:
   111                          ;  addr: address containing LSB of value to increment
   112                          ; -----------------------------------------------------------------------------
   113                          !macro inc16 .addr {
   114                            inc .addr
   115                            bne +
   116                            inc .addr + 1
   117                          +
   118                          }
   119                          
   120                          ; -----------------------------------------------------------------------------
   121                          ; +cmp16: compare two 16-bit values in memory
   122                          ; -----------------------------------------------------------------------------
   123                          ; Inputs:
   124                          ;  left:  address containing LSB of left value to comapre
   125                          ;  right: address containing LSB of right value to comapre
   126                          ; Outputs:
   127                          ;  C set if right < left
   128                          ;  Z set if right == left
   129                          ; -----------------------------------------------------------------------------
   130                          !macro cmp16 .left, .right {
   131                            lda .left + 1
   132                            cmp .right + 1
   133                          	bne +
   134                          	lda .left
   135                          	cmp .right
   136                          +
   137                          }
   138                          
   139                          ; -----------------------------------------------------------------------------
   140                          ; +cmp16: compare two 16-bit values in memory
   141                          ; -----------------------------------------------------------------------------
   142                          ; Inputs:
   143                          ;  value: immediate value to compare
   144                          ;  x:     msb
   145                          ;  a:     lsb
   146                          ; -----------------------------------------------------------------------------
   147                          !macro cmp16xa .value {
   148                            cpx #>.value
   149                          	bne .doneCmpXa
   150                          	cmp #<.value
   151                          .doneCmpXa
   152                          }
   153                          
   154                          ; -----------------------------------------------------------------------------
   155                          ; +sub16: subtract 16 bit numbers
   156                          ; -----------------------------------------------------------------------------
   157                          ; Inputs:
   158                          ;  left:  address containing LSB of left value
   159                          ;  right: address containing LSB of right value
   160                          ; Outputs:
   161                          ;  res:   address containing LSB of result
   162                          ; -----------------------------------------------------------------------------
   163                          !macro sub16 .left, .right, .res {
   164                            sec
   165                            lda .left
   166                            sbc .right
   167                            sta .res
   168                            lda .left + 1
   169                            sbc .right + 1
   170                            sta .res + 1
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; +sub16: subtract 16 bit numbers - result in ax registers
   175                          ; -----------------------------------------------------------------------------
   176                          ; Inputs:
   177                          ;  left:  address containing LSB of left value
   178                          ;  right: address containing LSB of right value
   179                          ; Outputs:
   180                          ;  a:     result msb
   181                          ;  x:     result lsb
   182                          ; -----------------------------------------------------------------------------
   183                          !macro sub16 .left, .right {
   184                            sec
   185                            lda .left
   186                            sbc .right
   187                            tax
   188                            lda .left + 1
   189                            sbc .right + 1
   190                          }
   191                          
   192                          
   193                          ; -----------------------------------------------------------------------------
   194                          ; +add16: add 16 bit numbers - result in ax registers
   195                          ; -----------------------------------------------------------------------------
   196                          ; Inputs:
   197                          ;  left:  address containing LSB of left value
   198                          ;  right: address containing LSB of right value
   199                          ; Outputs:
   200                          ;  a:     result msb
   201                          ;  x:     result lsb
   202                          ; -----------------------------------------------------------------------------
   203                          !macro add16 .left, .right {
   204                            clc
   205                            lda .left
   206                            adc .right
   207                            tax
   208                            lda .left + 1
   209                            adc .right + 1
   210                          }
   211                          
   212                          
   213                          ; -----------------------------------------------------------------------------
   214                          ; +add16Imm: add 16 bit numbers - result stored to res
   215                          ; -----------------------------------------------------------------------------
   216                          ; Inputs:
   217                          ;  left:  address containing LSB of left value
   218                          ;  imm:   immediate value to add
   219                          ; Outputs:
   220                          ;  res: address to store result
   221                          ; -----------------------------------------------------------------------------
   222                          !macro add16Imm .left, .imm, .res {
   223                            clc
   224                            lda .left
   225                            adc #<.imm
   226                            sta .res
   227                            lda .left + 1
   228                            adc #>.imm
   229                            sta .res + 1
   230                          }
   231                          
   232                          
   233                          ; -----------------------------------------------------------------------------
   234                          ; +subImm8From16: subtract an 8 bit number from a 16 bit number
   235                          ; -----------------------------------------------------------------------------
   236                          ; Inputs:
   237                          ;  left:  address containing LSB of left value
   238                          ;  right: immediate 8-bit value
   239                          ; Outputs:
   240                          ;  res:   address containing LSB of result
   241                          ; -----------------------------------------------------------------------------
   242                          !macro subImm8From16 .left, .right, .res {
   243                            sec
   244                            lda .left
   245                            sbc #.right
   246                            sta .res
   247                            lda .left + 1
   248                            sbc #0
   249                            sta .res + 1
   250                          }
   251                          
   252                          ; -----------------------------------------------------------------------------
   253                          ; +incBcd: increment a BCD byte (inc instruction doesn't work in bcd mode)
   254                          ; -----------------------------------------------------------------------------
   255                          ; Inputs:
   256                          ;  addr:  address containing BCD value
   257                          ; -----------------------------------------------------------------------------
   258                          !macro incBcd .addr {
   259                            lda .addr
   260                            sed
   261                            clc
   262                            adc #1
   263                            cld
   264                            sta .addr
   265                          }
   266                          
   267                          ; -----------------------------------------------------------------------------
   268                          ; +decBcd: decrement a BCD byte (inc instruction doesn't work in bcd mode)
   269                          ; -----------------------------------------------------------------------------
   270                          ; Inputs:
   271                          ;  addr:  address containing BCD value
   272                          ; -----------------------------------------------------------------------------
   273                          !macro decBcd .addr {
   274                            lda .addr
   275                            sed
   276                            sec
   277                            sbc #1
   278                            cld
   279                            sta .addr

; ******** Source: hbc56kernel.inc

; ******** Source: ut/memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.dst: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                          	lda #<.src
    53                          	sta MEM_SRC
    54                          	lda #>.src
    55                          	sta MEM_SRC + 1
    56                          
    57                          	lda #<.dst
    58                          	sta MEM_DST
    59                          	lda #>.dst
    60                          	sta MEM_DST + 1
    61                          
    62                          
    63                          		lda #<.cnt
    64                          		sta MEM_LEN
    65                          		lda #>.cnt
    66                          		sta MEM_LEN + 1
    67                          		jsr memcpyMultiPage
    68                          	}
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                          	lda #<.src
    74                          	sta MEM_SRC
    75                          	lda #>.src
    76                          	sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                          	lda #<.dst
    81                          	sta MEM_DST
    82                          	lda #>.dst
    83                          	sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                          	lda .srcRef
    88                          	sta MEM_SRC
    89                          	lda .srcRef + 1
    90                          	sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                          	lda .dstRef
    95                          	sta MEM_DST
    96                          	lda .dstRef + 1
    97                          	sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                          	!if .bytes <= 0 {
   103                          		!error "memcpySinglePage: invalid count: ", .bytes
   104                          	}	
   105                          
   106                          	ldy #.bytes
   107                          	jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;	.src: source address
   116                          ;	.dst: destination address
   117                          ;	.cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                          	!if .cnt <= 0 {
   121                          		!error "memcpyPort: invalid count: ", .cnt
   122                          	}
   123                          	
   124                          	lda #<.src
   125                          	sta MEM_SRC
   126                          	lda #>.src
   127                          	sta MEM_SRC + 1
   128                          
   129                          	lda #<.dst
   130                          	sta MEM_DST
   131                          	lda #>.dst
   132                          	sta MEM_DST + 1
   133                          
   134                          	!if .cnt <= 256 {
   135                          		ldy #<.cnt					
   136                          		jsr memcpySinglePagePort
   137                          	} else {
   138                          		lda #<.cnt
   139                          		sta MEM_LEN
   140                          		lda #>.cnt
   141                          		sta MEM_LEN + 1
   142                          		jsr memcpyMultiPagePort
   143                          	}
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;	.dst: destination address
   153                          ;	val: the byte value
   154                          ;	.cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                          	!error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                          	lda #.val
   161                          	!for i, 0, .cnt - 1 {
   162                          	sta .dst + i
   163                          	}
   164                          } else if .cnt <= 256 {
   165                          	ldx #<.cnt
   166                          	lda #.val
   167                          -
   168                          	dex
   169                          	sta .dst, x
   170                          	cpx #0
   171                          	bne -
   172                          } else {
   173                          	lda #<.dst
   174                          	sta MEM_DST
   175                          	lda #>.dst
   176                          	sta MEM_DST + 1
   177                          	lda #<.cnt
   178                          	sta MEM_LEN
   179                          	lda #>.cnt
   180                          	sta MEM_LEN + 1
   181                          	lda #.val
   182                          	jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: hbc56kernel.inc

; ******** Source: gfx/tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: hbc56kernel.inc

; ******** Source: gfx/tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: hbc56kernel.inc

; ******** Source: lcd/lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: hbc56kernel.inc

; ******** Source: inp/nes.inc
     1                          ; 6502 NES Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro nes1BranchIfPressed .buttonMask, .addr {
    14                                  pha
    15                                  lda #(.buttonMask)
    16                                  jsr nes1Pressed
    17                                  pla
    18                                  bcs .addr
    19                          }
    20                          
    21                          !macro nes1BranchIfNotPressed .buttonMask, .addr {
    22                                  pha
    23                                  lda #(.buttonMask)
    24                                  jsr nes1Pressed
    25                                  pla
    26                                  bcc .addr
    27                          }
    28                          
    29                          !macro nes2BranchIfPressed .buttonMask, addr {
    30                                  pha
    31                                  lda #(.buttonMask)
    32                                  jsr nes2Pressed
    33                                  pla
    34                                  bcs addr
    35                          }
    36                          
    37                          !macro nes2BranchIfNotPressed .buttonMask, addr {
    38                                  pha
    39                                  lda #(.buttonMask)
    40                                  jsr nes2Pressed
    41                                  pla
    42                                  bcc addr
    43                          }

; ******** Source: hbc56kernel.inc

; ******** Source: inp/keyboard.inc
     1                          ; 6502 KB Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro kbBranchIfNotPressed .scancode, .addr {
    14                                  ldx #.scancode
    15                                  jsr kbReadAscii
    16                                  beq .addr
    17                          }
    18                          
    19                          !macro kbBranchIfPressed .scancode, .addr {
    20                                  ldx #.scancode
    21                                  jsr kbIsPressed
    22                                  bne .addr
    23                          }
    24                          
    25                          !macro kbSetEventHandlerPressed .cb {
    26                                  lda #<.cb
    27                                  sta KB_CB_PRESSED
    28                                  lda #>.cb
    29                                  sta KB_CB_PRESSED + 1
    30                          }
    31                          
    32                          !macro kbSetEventHandlerReleased .cb {
    33                                  lda #<.cb
    34                                  sta KB_CB_RELEASED
    35                                  lda #>.cb
    36                                  sta KB_CB_RELEASED + 1

; ******** Source: hbc56kernel.inc

; ******** Source: sfx/ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                          }

; ******** Source: hbc56kernel.inc

; ******** Source: ser/uart.inc
     1                          ; 6502 - MC68B50 UART Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; uartOutStringAddr: Output a string to the uart
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  .addr: Address of null-terminated string to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro uartOutStringAddr .addr {
    17                                  lda #<.addr
    18                                  sta STR_ADDR_L
    19                                  lda #>.addr
    20                                  sta STR_ADDR_H
    21                                  jsr uartOutString        
    22                          }
    23                          
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; uartOutString: Output an immediate string to the uart
    27                          ; -----------------------------------------------------------------------------
    28                          ; Inputs:
    29                          ;  .str: String to output
    30                          ; -----------------------------------------------------------------------------
    31                          !macro uartOutString .str {
    32                          	jmp @afterText
    33                          @textAddr
    34                          	!text .str,0
    35                          @afterText        
    36                                  +uartOutStringAddr @textAddr
    37                          }
    38                          

; ******** Source: hbc56kernel.inc

; ******** Source: kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: hbc56kernel.inc
    27                          
    28                          !ifndef HBC_56_EXCLUDE_KERNEL_ROM {
    29                          
    30                                  ; if the program requires the kernal image
    31                                  ; then... include it
    32                          
    33                                  *=HBC56_META_VECTOR
    34                                  !ifdef hbc56Meta {
    35                                          jmp hbc56Meta
    36                                  } else {
    37  dffc 60                                 rts
    38                                  }
    39                          
    40                                  *=HBC56_KERNEL_START
    41  e000 c9619005c97b9002...        !bin "kernel.o"
    42                          
    43                                  *=DEFAULT_HBC56_RST_VECTOR
    44  8000 4c0d08                     jmp hbc56Main
    45                          
    46                          } else {
    47                          
    48                                  ; otherwise, place the program in RAM
    49                          
    50                                  *=$0400

; ******** Source: durexforth.asm
    28                          
    29                          
    30                          * = $801
    31                          
    32  0801 0b080a009e323036...!byte $b, $08, $a, 0, $9E, $32, $30, $36, $31, 0, 0, 0 ; basic header
    33                          
    34                          hbc56Main:
    35                          
    36                          ;; Word flags
    37                          F_IMMEDIATE = $80
    38                          ; When set, calls to the word will not be subject to tail call elimination.
    39                          ; I.e., "jsr WORD + rts" will not be replaced by "jmp WORD".
    40                          F_NO_TAIL_CALL_ELIMINATION = $40
    41                          STRLEN_MASK = $1f
    42                          
    43                          TIB = $200
    44                          
    45                          ; Zeropage
    46                          
    47                          ; Parameter stack
    48                          ; The x register contains the current stack depth.
    49                          ; It is initially 0 and decrements when items are pushed.
    50                          ; The parameter stack is placed in zeropage to save space.
    51                          ; (E.g. lda $FF,x takes less space than lda $FFFF,x)
    52                          ; We use a split stack that store low-byte and high-byte
    53                          ; in separate ranges on the zeropage, so that popping and
    54                          ; pushing gets faster (only one inx/dex operation).
    55                          X_INIT = 0
    56                          MSB = $73 ; high-byte stack placed in [$3b .. $72]
    57                          LSB = $3b ; low-byte stack placed in [3 .. $3a]
    58                          
    59                          W = $8b ; rnd seed
    60                          W2 = $8d ; rnd seed
    61                          W3 = $9e ; tape error log
    62                          
    63                          OP_JMP = $4c
    64                          OP_JSR = $20
    65                          OP_RTS = $60
    66                          OP_INX = $e8
    67                          
    68                          ; PUTCHR = $ffd2 ; put char
    69                          PUTCHR = tmsConsoleOut
    70                          
    71                          K_RETURN = $d
    72                          K_CLRSCR = $93
    73                          K_SPACE = ' '
    74                          
    75                          ; PLACEHOLDER_ADDRESS instances are overwritten using self-modifying code.
    76                          ; It must end in 00 for situations where the Y register is used as the LSB of the address.
    77                          PLACEHOLDER_ADDRESS = $1200
    78                          
    79                          !ct pet
    80                          
    81                          ; -------- program start
    82  080d 78                     sei
    83  080e 20a2ea                 jsr kbInit
    84                          
    85  0811 2044e6                 jsr tmsModeText
    86  0814 0878a9008d117f20...    +tmsUpdateFont TMS_TEXT_MODE_FONT
    87                          
    88  0844 a93120cfe5             +tmsSetColorFgBg TMS_LT_GREEN, TMS_BLACK
    89  0849 a94020e5e5             +tmsEnableOutput
    90  084e 58                     cli
    91                          
    92  084f a92020e5e5             +tmsEnableInterrupts
    93  0854 a94020e5e5             +tmsEnableOutput
    94  0859 ada37c09808da37c       +consoleEnableCursor
    95                          
    96                          TMS_TEXT_MODE_FONT:

; ******** Source: gfx/fonts/tms9918font2subset.asm
     1                          ; 6502 - TMS9918 Font 2 Subset 6x8 Text mode
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  0861 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  0869 1038381010001000   !byte $10,$38,$38,$10,$10,$00,$10,$00 ; !
    34  0871 6c6c480000000000   !byte $6C,$6C,$48,$00,$00,$00,$00,$00 ; "
    35  0879 00287c28287c2800   !byte $00,$28,$7C,$28,$28,$7C,$28,$00 ; #
    36  0881 2038403008701000   !byte $20,$38,$40,$30,$08,$70,$10,$00 ; $
    37  0889 64640810204c4c00   !byte $64,$64,$08,$10,$20,$4C,$4C,$00 ; %
    38  0891 2050502054483400   !byte $20,$50,$50,$20,$54,$48,$34,$00 ; &
    39  0899 3030200000000000   !byte $30,$30,$20,$00,$00,$00,$00,$00 ; '
    40  08a1 1020202020201000   !byte $10,$20,$20,$20,$20,$20,$10,$00 ; (
    41  08a9 2010101010102000   !byte $20,$10,$10,$10,$10,$10,$20,$00 ; )
    42  08b1 0028387c38280000   !byte $00,$28,$38,$7C,$38,$28,$00,$00 ; *
    43  08b9 0010107c10100000   !byte $00,$10,$10,$7C,$10,$10,$00,$00 ; +
    44  08c1 0000000000303020   !byte $00,$00,$00,$00,$00,$30,$30,$20 ; ,
    45  08c9 0000007c00000000   !byte $00,$00,$00,$7C,$00,$00,$00,$00 ; -
    46  08d1 0000000000303000   !byte $00,$00,$00,$00,$00,$30,$30,$00 ; .
    47  08d9 0004081020400000   !byte $00,$04,$08,$10,$20,$40,$00,$00 ; /
    48  08e1 38444c5464443800   !byte $38,$44,$4C,$54,$64,$44,$38,$00 ; 0
    49  08e9 1030101010103800   !byte $10,$30,$10,$10,$10,$10,$38,$00 ; 1
    50  08f1 3844041820407c00   !byte $38,$44,$04,$18,$20,$40,$7C,$00 ; 2
    51  08f9 3844043804443800   !byte $38,$44,$04,$38,$04,$44,$38,$00 ; 3
    52  0901 081828487c080800   !byte $08,$18,$28,$48,$7C,$08,$08,$00 ; 4
    53  0909 7c40407804443800   !byte $7C,$40,$40,$78,$04,$44,$38,$00 ; 5
    54  0911 1820407844443800   !byte $18,$20,$40,$78,$44,$44,$38,$00 ; 6
    55  0919 7c04081020202000   !byte $7C,$04,$08,$10,$20,$20,$20,$00 ; 7
    56  0921 3844443844443800   !byte $38,$44,$44,$38,$44,$44,$38,$00 ; 8
    57  0929 3844443c04083000   !byte $38,$44,$44,$3C,$04,$08,$30,$00 ; 9
    58  0931 0000303000303000   !byte $00,$00,$30,$30,$00,$30,$30,$00 ; :
    59  0939 0000303000303020   !byte $00,$00,$30,$30,$00,$30,$30,$20 ; ;
    60  0941 0810204020100800   !byte $08,$10,$20,$40,$20,$10,$08,$00 ; <
    61  0949 00007c00007c0000   !byte $00,$00,$7C,$00,$00,$7C,$00,$00 ; =
    62  0951 2010080408102000   !byte $20,$10,$08,$04,$08,$10,$20,$00 ; >
    63  0959 3844041810001000   !byte $38,$44,$04,$18,$10,$00,$10,$00 ; ?
    64  0961 38445c545c403800   !byte $38,$44,$5C,$54,$5C,$40,$38,$00 ; @
    65  0969 384444447c444400   !byte $38,$44,$44,$44,$7C,$44,$44,$00 ; A
    66  0971 7844447844447800   !byte $78,$44,$44,$78,$44,$44,$78,$00 ; B
    67  0979 3844404040443800   !byte $38,$44,$40,$40,$40,$44,$38,$00 ; C
    68  0981 7844444444447800   !byte $78,$44,$44,$44,$44,$44,$78,$00 ; D
    69  0989 7c40407840407c00   !byte $7C,$40,$40,$78,$40,$40,$7C,$00 ; E
    70  0991 7c40407840404000   !byte $7C,$40,$40,$78,$40,$40,$40,$00 ; F
    71  0999 3844405c44443c00   !byte $38,$44,$40,$5C,$44,$44,$3C,$00 ; G
    72  09a1 4444447c44444400   !byte $44,$44,$44,$7C,$44,$44,$44,$00 ; H
    73  09a9 3810101010103800   !byte $38,$10,$10,$10,$10,$10,$38,$00 ; I
    74  09b1 0404040444443800   !byte $04,$04,$04,$04,$44,$44,$38,$00 ; J
    75  09b9 4448506050484400   !byte $44,$48,$50,$60,$50,$48,$44,$00 ; K
    76  09c1 4040404040407c00   !byte $40,$40,$40,$40,$40,$40,$7C,$00 ; L
    77  09c9 446c544444444400   !byte $44,$6C,$54,$44,$44,$44,$44,$00 ; M
    78  09d1 4464544c44444400   !byte $44,$64,$54,$4C,$44,$44,$44,$00 ; N
    79  09d9 3844444444443800   !byte $38,$44,$44,$44,$44,$44,$38,$00 ; O
    80  09e1 7844447840404000   !byte $78,$44,$44,$78,$40,$40,$40,$00 ; P
    81  09e9 3844444454483400   !byte $38,$44,$44,$44,$54,$48,$34,$00 ; Q
    82  09f1 7844447848444400   !byte $78,$44,$44,$78,$48,$44,$44,$00 ; R
    83  09f9 3844403804443800   !byte $38,$44,$40,$38,$04,$44,$38,$00 ; S
    84  0a01 7c10101010101000   !byte $7C,$10,$10,$10,$10,$10,$10,$00 ; T
    85  0a09 4444444444443800   !byte $44,$44,$44,$44,$44,$44,$38,$00 ; U
    86  0a11 4444444444281000   !byte $44,$44,$44,$44,$44,$28,$10,$00 ; V
    87  0a19 4444545454542800   !byte $44,$44,$54,$54,$54,$54,$28,$00 ; W
    88  0a21 4444281028444400   !byte $44,$44,$28,$10,$28,$44,$44,$00 ; X
    89  0a29 4444442810101000   !byte $44,$44,$44,$28,$10,$10,$10,$00 ; Y
    90  0a31 7808102040407800   !byte $78,$08,$10,$20,$40,$40,$78,$00 ; Z
    91  0a39 3820202020203800   !byte $38,$20,$20,$20,$20,$20,$38,$00 ; [
    92  0a41 0040201008040000   !byte $00,$40,$20,$10,$08,$04,$00,$00 ; \
    93  0a49 3808080808083800   !byte $38,$08,$08,$08,$08,$08,$38,$00 ; ]
    94  0a51 1028440000000000   !byte $10,$28,$44,$00,$00,$00,$00,$00 ; ^
    95  0a59 00000000000000fc   !byte $00,$00,$00,$00,$00,$00,$00,$FC ; _
    96  0a61 3030100000000000   !byte $30,$30,$10,$00,$00,$00,$00,$00 ; `
    97  0a69 000038043c443c00   !byte $00,$00,$38,$04,$3C,$44,$3C,$00 ; a
    98  0a71 4040784444447800   !byte $40,$40,$78,$44,$44,$44,$78,$00 ; b
    99  0a79 0000384440443800   !byte $00,$00,$38,$44,$40,$44,$38,$00 ; c
   100  0a81 04043c4444443c00   !byte $04,$04,$3C,$44,$44,$44,$3C,$00 ; d
   101  0a89 0000384478403800   !byte $00,$00,$38,$44,$78,$40,$38,$00 ; e
   102  0a91 1820207820202000   !byte $18,$20,$20,$78,$20,$20,$20,$00 ; f
   103  0a99 00003c44443c0438   !byte $00,$00,$3C,$44,$44,$3C,$04,$38 ; g
   104  0aa1 4040704848484800   !byte $40,$40,$70,$48,$48,$48,$48,$00 ; h
   105  0aa9 1000101010101800   !byte $10,$00,$10,$10,$10,$10,$18,$00 ; i
   106  0ab1 0800180808084830   !byte $08,$00,$18,$08,$08,$08,$48,$30 ; j
   107  0ab9 4040485060504800   !byte $40,$40,$48,$50,$60,$50,$48,$00 ; k
   108  0ac1 1010101010101800   !byte $10,$10,$10,$10,$10,$10,$18,$00 ; l
   109  0ac9 0000685454444400   !byte $00,$00,$68,$54,$54,$44,$44,$00 ; m
   110  0ad1 0000704848484800   !byte $00,$00,$70,$48,$48,$48,$48,$00 ; n
   111  0ad9 0000384444443800   !byte $00,$00,$38,$44,$44,$44,$38,$00 ; o
   112  0ae1 0000784444447840   !byte $00,$00,$78,$44,$44,$44,$78,$40 ; p
   113  0ae9 00003c4444443c04   !byte $00,$00,$3C,$44,$44,$44,$3C,$04 ; q
   114  0af1 0000582420207000   !byte $00,$00,$58,$24,$20,$20,$70,$00 ; r
   115  0af9 0000384038043800   !byte $00,$00,$38,$40,$38,$04,$38,$00 ; s
   116  0b01 0020782020281000   !byte $00,$20,$78,$20,$20,$28,$10,$00 ; t
   117  0b09 0000484848582800   !byte $00,$00,$48,$48,$48,$58,$28,$00 ; u
   118  0b11 0000444444281000   !byte $00,$00,$44,$44,$44,$28,$10,$00 ; v
   119  0b19 00004444547c2800   !byte $00,$00,$44,$44,$54,$7C,$28,$00 ; w
   120  0b21 0000484830484800   !byte $00,$00,$48,$48,$30,$48,$48,$00 ; x
   121  0b29 0000484848381060   !byte $00,$00,$48,$48,$48,$38,$10,$60 ; y
   122  0b31 0000780830407800   !byte $00,$00,$78,$08,$30,$40,$78,$00 ; z
   123  0b39 1820206020201800   !byte $18,$20,$20,$60,$20,$20,$18,$00 ; {
   124  0b41 1010100010101000   !byte $10,$10,$10,$00,$10,$10,$10,$00 ; |
   125  0b49 3008080c08083000   !byte $30,$08,$08,$0C,$08,$08,$30,$00 ; }
   126  0b51 2850000000000000   !byte $28,$50,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: durexforth.asm
    97  0b59 ffffffffffffffff   
    98                          
    99                          
   100  0b61 ba                     tsx
   101  0b62 8e6310                 stx INIT_S
   102  0b65 a200                   ldx #X_INIT
   103                          
   104  0b67 20ed0f                 jsr quit_reset
   105                          
   106  0b6a 204b17                 jsr PAGE
   107                          
   108  0b6d a916                   lda	#%00010110 ; lowercase
   109  0b6f 8d18d0                 sta	$d018
   110                          
   111                          _START = * + 1
   112  0b72 203d1b                 jsr load_base
   113                          
   114                          ; ----------- macros
   115                          
   116                          !set WORDLIST_BASE = $9fff
   117                          !set __LATEST = WORDLIST_BASE
   118                          
   119                          !set BACK = *
   120                          * = __LATEST
   121  9fff 00                 !byte 0
   122                          * = BACK
   123                          
   124                          !macro BACKLINK .name , .namesize {
   125                              !set __LATEST = __LATEST - 3 - len(.name)
   126                              !set .xt = *
   127                              * = __LATEST
   128                              !byte .namesize
   129                              !text .name
   130                          	!word .xt
   131                              * = .xt
   132                          }
   133                          
   134                          !macro VALUE .word {
   135                              lda	#<.word
   136                              ldy	#>.word
   137                              jmp pushya
   138                          }
   139                          
   140                          ; ---------- words
   141                          
   142  9ff6 0650555348594175...    +BACKLINK "pushya", 6
   143                          pushya
   144  0b75 ca                     dex
   145  0b76 953b                   sta	LSB, x
   146  0b78 9473                   sty	MSB, x
   147  0b7a 60                     rts
   148                          
   149  9ff2 01307b0b               +BACKLINK "0", 1
   150                          ZERO
   151  0b7b a900                   lda	#0
   152  0b7d a8                     tay
   153  0b7e 4c750b                 jmp pushya
   154                          
   155  9fee 0131810b               +BACKLINK "1", 1
   156                          ONE
   157  0b81 a901a0004c750b         +VALUE 1
   158                          
   159                          ; START - points to the code of the startup word.
   160  9fe6 055354415254880b       +BACKLINK "start", 5
   161  0b88 a973a00b4c750b         +VALUE	_START
   162                          
   163  9fe0 034d53428f0b           +BACKLINK "msb", 3
   164  0b8f a973a0004c750b         +VALUE	MSB
   165                          
   166  9fda 034c5342960b           +BACKLINK "lsb", 3
   167  0b96 a93ba0004c750b         +VALUE	LSB
   168                          

; ******** Source: core.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; DROP SWAP DUP ?DUP OVER 2DUP 1+ 1- + = 0= AND ! @ C! C@ COUNT > < MAX MIN TUCK
    24                          ; >R R> R@ BL PICK DEPTH WITHIN FILL BASE 2*
    25                          
    26  9fd3 8444524f509d0b         +BACKLINK "drop", 4 | F_IMMEDIATE
    27                          DROP
    28  0b9d ad7915                 lda STATE
    29  0ba0 d002                   bne +
    30  0ba2 e8                     inx
    31  0ba3 60                     rts
    32  0ba4 a9e8               +   lda #OP_INX
    33  0ba6 4c3f17                 jmp compile_a
    34                          
    35  9fcc 0453574150a90b         +BACKLINK "swap", 4
    36                          SWAP
    37  0ba9 b473                   ldy	MSB, x
    38  0bab b574                   lda	MSB + 1, x
    39  0bad 9573                   sta MSB, x
    40  0baf 9474                   sty	MSB + 1, x
    41                          
    42  0bb1 b43b                   ldy	LSB, x
    43  0bb3 b53c                   lda	LSB + 1, x
    44  0bb5 953b                   sta LSB, x
    45  0bb7 943c                   sty	LSB + 1, x
    46  0bb9 60                     rts
    47                          
    48  9fc6 03445550ba0b           +BACKLINK "dup", 3
    49                          DUP
    50  0bba ca                     dex
    51  0bbb b574                   lda	MSB + 1, x
    52  0bbd 9573                   sta	MSB, x
    53  0bbf b53c                   lda	LSB + 1, x
    54  0bc1 953b                   sta	LSB, x
    55  0bc3 60                     rts
    56                          
    57  9fbf 043f445550c40b         +BACKLINK "?dup", 4
    58                          QDUP
    59  0bc4 b573                   lda MSB, x
    60  0bc6 153b                   ora LSB, x
    61  0bc8 d0f0                   bne DUP
    62  0bca 60                     rts
    63                          
    64  9fb8 044f564552cb0b         +BACKLINK "over", 4
    65                          OVER
    66  0bcb ca                     dex
    67  0bcc b575                   lda	MSB + 2, x
    68  0bce 9573                   sta	MSB, x
    69  0bd0 b53d                   lda	LSB + 2, x
    70  0bd2 953b                   sta	LSB, x
    71  0bd4 60                     rts
    72                          
    73  9fb1 0432445550d50b         +BACKLINK "2dup", 4
    74                          TWODUP
    75  0bd5 20cb0b                 jsr OVER
    76  0bd8 4ccb0b                 jmp OVER
    77                          
    78  9fac 02312bdb0b             +BACKLINK "1+", 2
    79                          ONEPLUS
    80  0bdb f63b                   inc LSB, x
    81  0bdd d002                   bne +
    82  0bdf f673                   inc MSB, x
    83  0be1 60                 +   rts
    84                          
    85  9fa7 02312de20b             +BACKLINK "1-", 2
    86                          ONEMINUS
    87  0be2 b53b                   lda LSB, x
    88  0be4 d002                   bne +
    89  0be6 d673                   dec MSB, x
    90  0be8 d63b               +   dec LSB, x
    91  0bea 60                     rts
    92                          
    93  9fa3 012beb0b               +BACKLINK "+", 1
    94                          PLUS
    95  0beb b53b                   lda	LSB, x
    96  0bed 18                     clc
    97  0bee 753c                   adc LSB + 1, x
    98  0bf0 953c                   sta	LSB + 1, x
    99                          
   100  0bf2 b573                   lda	MSB, x
   101  0bf4 7574                   adc MSB + 1, x
   102  0bf6 9574                   sta MSB + 1, x
   103                          
   104  0bf8 e8                     inx
   105  0bf9 60                     rts
   106                          
   107  9f9f 013dfa0b               +BACKLINK "=", 1
   108                          EQUAL
   109  0bfa a000                   ldy #0
   110  0bfc b53b                   lda	LSB, x
   111  0bfe d53c                   cmp	LSB + 1, x
   112  0c00 d007                   bne	+
   113  0c02 b573                   lda	MSB, x
   114  0c04 d574                   cmp	MSB + 1, x
   115  0c06 d001                   bne	+
   116  0c08 88                     dey
   117  0c09 e8                 +   inx
   118  0c0a 9473                   sty MSB, x
   119  0c0c 943b                   sty	LSB, x
   120  0c0e 60                     rts
   121                          
   122                          ; 0=
   123  9f9a 02303d0f0c             +BACKLINK "0=", 2
   124                          ZEQU
   125  0c0f a000                   ldy #0
   126  0c11 b53b                   lda LSB, x
   127  0c13 d005                   bne +
   128  0c15 b573                   lda MSB, x
   129  0c17 d001                   bne +
   130  0c19 88                     dey
   131  0c1a 9473               +   sty MSB, x
   132  0c1c 943b                   sty LSB, x
   133  0c1e 60                     rts
   134                          
   135  9f94 03414e441f0c           +BACKLINK "and", 3
   136  0c1f b573                   lda	MSB, x
   137  0c21 3574                   and MSB + 1, x
   138  0c23 9574                   sta MSB + 1, x
   139                          
   140  0c25 b53b                   lda	LSB, x
   141  0c27 353c                   and LSB + 1, x
   142  0c29 953c                   sta LSB + 1, x
   143                          
   144  0c2b e8                     inx
   145  0c2c 60                     rts
   146                          
   147  9f90 01212d0c               +BACKLINK "!", 1
   148                          STORE
   149  0c2d b53b                   lda LSB, x
   150  0c2f 858b                   sta W
   151  0c31 b573                   lda MSB, x
   152  0c33 858c                   sta W + 1
   153                          
   154  0c35 a000                   ldy #0
   155  0c37 b53c                   lda	LSB+1, x
   156  0c39 918b                   sta (W), y
   157  0c3b c8                     iny
   158  0c3c b574                   lda	MSB+1, x
   159  0c3e 918b                   sta	(W), y
   160                          
   161  0c40 e8                     inx
   162  0c41 e8                     inx
   163  0c42 60                     rts
   164                          
   165  9f8c 0140430c               +BACKLINK "@", 1
   166                          FETCH
   167  0c43 b53b                   lda LSB,x
   168  0c45 858b                   sta W
   169  0c47 b573                   lda MSB,x
   170  0c49 858c                   sta W+1
   171                          
   172  0c4b a000                   ldy #0
   173  0c4d b18b                   lda	(W),y
   174  0c4f 953b                   sta LSB,x
   175  0c51 c8                     iny
   176  0c52 b18b                   lda	(W),y
   177  0c54 9573                   sta MSB,x
   178  0c56 60                     rts
   179                          
   180  9f87 024321570c             +BACKLINK "c!", 2
   181                          STOREBYTE
   182  0c57 b43b                   ldy LSB,x
   183  0c59 b573                   lda MSB,x
   184  0c5b 8d620c                 sta + + 2
   185  0c5e b53c                   lda	LSB+1,x
   186  0c60 990012             +   sta PLACEHOLDER_ADDRESS,y ; replaced with addr
   187  0c63 e8                     inx
   188  0c64 e8                     inx
   189  0c65 60                     rts
   190                          
   191  9f82 024340660c             +BACKLINK "c@", 2
   192                          FETCHBYTE
   193  0c66 b43b                   ldy LSB,x
   194  0c68 b573                   lda MSB,x
   195  0c6a 8d6f0c                 sta + + 2
   196  0c6d b90012             +   lda PLACEHOLDER_ADDRESS,y ; replaced with addr
   197  0c70 953b                   sta LSB,x
   198  0c72 a900                   lda #0
   199  0c74 9573                   sta MSB,x
   200  0c76 60                     rts
   201                          
   202  9f7a 05434f554e54770c       +BACKLINK "count", 5
   203                          COUNT
   204  0c77 20ba0b                 jsr DUP
   205  0c7a 20db0b                 jsr ONEPLUS
   206  0c7d 20a90b                 jsr SWAP
   207  0c80 4c660c                 jmp FETCHBYTE
   208                          
   209  9f76 013c830c               +BACKLINK "<", 1
   210                          LESS_THAN
   211  0c83 a000                   ldy #0
   212  0c85 38                     sec
   213  0c86 b53c                   lda LSB+1,x
   214  0c88 f53b                   sbc LSB,x
   215  0c8a b574                   lda MSB+1,x
   216  0c8c f573                   sbc MSB,x
   217  0c8e 5002                   bvc +
   218  0c90 4980                   eor #$80
   219  0c92 1001               +   bpl +
   220  0c94 88                     dey
   221  0c95 e8                 +   inx
   222  0c96 943b                   sty LSB,x
   223  0c98 9473                   sty MSB,x
   224  0c9a 60                     rts
   225                          
   226  9f72 013e9b0c               +BACKLINK ">", 1
   227                          GREATER_THAN
   228  0c9b 20a90b                 jsr SWAP
   229  0c9e 4c830c                 jmp LESS_THAN
   230                          
   231  9f6c 034d4158a10c           +BACKLINK "max", 3
   232                          MAX
   233  0ca1 20d50b                 jsr TWODUP
   234  0ca4 20830c                 jsr LESS_THAN
   235  0ca7 20ff16                 jsr ZBRANCH
   236  0caa af0c                   !word +
   237  0cac 20a90b                 jsr SWAP
   238  0caf e8                 +   inx
   239  0cb0 60                     rts
   240                          
   241  9f66 034d494eb10c           +BACKLINK "min", 3
   242                          MIN
   243  0cb1 20d50b                 jsr TWODUP
   244  0cb4 209b0c                 jsr GREATER_THAN
   245  0cb7 20ff16                 jsr ZBRANCH
   246  0cba bf0c                   !word +
   247  0cbc 20a90b                 jsr SWAP
   248  0cbf e8                 +   inx
   249  0cc0 60                     rts
   250                          
   251  9f5f 045455434bc10c         +BACKLINK "tuck", 4
   252                          TUCK ; ( x y -- y x y )
   253  0cc1 20a90b                 jsr SWAP
   254  0cc4 4ccb0b                 jmp OVER
   255                          
   256                              ; Exempt from TCE as top of return stack must contain a return address.
   257  9f5a 423e52c70c             +BACKLINK ">r", 2 | F_NO_TAIL_CALL_ELIMINATION
   258                          TO_R
   259  0cc7 68                     pla
   260  0cc8 858b                   sta W
   261  0cca 68                     pla
   262  0ccb 858c                   sta W+1
   263  0ccd e68b                   inc W
   264  0ccf d002                   bne +
   265  0cd1 e68c                   inc W+1
   266                          +
   267  0cd3 b573                   lda MSB,x
   268  0cd5 48                     pha
   269  0cd6 b53b                   lda LSB,x
   270  0cd8 48                     pha
   271  0cd9 e8                     inx
   272  0cda 6c8b00                 jmp (W)
   273                          
   274                              ; Exempt from TCE as top of return stack must contain a return address.
   275  9f55 42523edd0c             +BACKLINK "r>", 2 | F_NO_TAIL_CALL_ELIMINATION
   276                          R_TO
   277  0cdd 68                     pla
   278  0cde 858b                   sta W
   279  0ce0 68                     pla
   280  0ce1 858c                   sta W+1
   281  0ce3 e68b                   inc W
   282  0ce5 d002                   bne +
   283  0ce7 e68c                   inc W+1
   284                          +
   285  0ce9 ca                     dex
   286  0cea 68                     pla
   287  0ceb 953b                   sta LSB,x
   288  0ced 68                     pla
   289  0cee 9573                   sta MSB,x
   290  0cf0 6c8b00                 jmp (W)
   291                          
   292                              ; Exempt from TCE as top of return stack must contain a return address.
   293  9f50 425240f30c             +BACKLINK "r@", 2 | F_NO_TAIL_CALL_ELIMINATION
   294                          R_FETCH
   295  0cf3 8a                     txa
   296  0cf4 ba                     tsx
   297  0cf5 bc0301                 ldy $103,x
   298  0cf8 848b                   sty W
   299  0cfa bc0401                 ldy $104,x
   300  0cfd aa                     tax
   301  0cfe ca                     dex
   302  0cff 9473                   sty MSB,x
   303  0d01 a58b                   lda W
   304  0d03 953b                   sta LSB,x
   305  0d05 60                     rts
   306                          
   307  9f4b 02424c060d             +BACKLINK "bl", 2
   308                          BL
   309  0d06 a920a0004c750b         +VALUE	K_SPACE
   310                          
   311  9f44 045049434b0d0d         +BACKLINK "pick", 4
   312  0d0d 8a                     txa
   313  0d0e 8d1b0d                 sta + + 1
   314  0d11 18                     clc
   315  0d12 753b                   adc LSB,x
   316  0d14 aa                     tax
   317  0d15 e8                     inx
   318  0d16 b53b                   lda LSB,x
   319  0d18 b473                   ldy MSB,x
   320  0d1a a200               +   ldx #0
   321  0d1c 953b                   sta LSB,x
   322  0d1e 9473                   sty MSB,x
   323  0d20 60                     rts
   324                          
   325  9f3c 054445505448210d       +BACKLINK "depth", 5
   326  0d21 8a                     txa
   327  0d22 49ff                   eor #$ff
   328  0d24 a8                     tay
   329  0d25 c8                     iny
   330  0d26 ca                     dex
   331  0d27 943b                   sty LSB,x
   332  0d29 a900                   lda #0
   333  0d2b 9573                   sta MSB,x
   334  0d2d 60                     rts
   335                          
   336  9f33 0657495448494e2e...    +BACKLINK "within", 6
   337                          WITHIN ; ( test low high -- flag )
   338  0d2e 20cb0b                 jsr OVER
   339  0d31 20b10d                 jsr MINUS
   340  0d34 20c70c                 jsr TO_R
   341  0d37 20b10d                 jsr MINUS
   342  0d3a 20dd0c                 jsr R_TO
   343  0d3d 4c9a0d                 jmp U_LESS
   344                          
   345                          ; FILL ( start len char -- )
   346  9f2c 0446494c4c400d         +BACKLINK "fill", 4
   347                          FILL
   348  0d40 b53b                   lda	LSB, x
   349  0d42 a8                     tay
   350  0d43 b53d                   lda	LSB + 2, x
   351  0d45 8d660d                 sta	.fdst
   352  0d48 b575                   lda	MSB + 2, x
   353  0d4a 8d670d                 sta	.fdst + 1
   354  0d4d b53c                   lda	LSB + 1, x
   355  0d4f 49ff                   eor	#$ff
   356  0d51 858b                   sta	W
   357  0d53 b574                   lda	MSB + 1, x
   358  0d55 49ff                   eor	#$ff
   359  0d57 858c                   sta	W + 1
   360  0d59 e8                     inx
   361  0d5a e8                     inx
   362  0d5b e8                     inx
   363                          -
   364  0d5c e68b                   inc	W
   365  0d5e d005                   bne	+
   366  0d60 e68c                   inc	W + 1
   367  0d62 d001                   bne	+
   368  0d64 60                     rts
   369                          +
   370                          .fdst = * + 1
   371  0d65 8c0012                 sty	PLACEHOLDER_ADDRESS ; replaced with start
   372                          
   373                              ; advance
   374  0d68 ee660d                 inc	.fdst
   375  0d6b d0ef                   bne	-
   376  0d6d ee670d                 inc	.fdst + 1
   377  0d70 4c5c0d                 jmp	-
   378                          
   379  9f25 0442415345730d         +BACKLINK "base", 4
   380  0d73 a97aa00d4c750b         +VALUE	BASE
   381                          BASE
   382  0d7a 1000                   !word 16
   383                          
   384  9f20 02322a7c0d             +BACKLINK "2*", 2
   385  0d7c 163b                   asl LSB, x
   386  0d7e 3673                   rol MSB, x
   387  0d80 60                     rts
   388                          
   389  9f1a 03524f54810d           +BACKLINK "rot", 3 ; ( a b c -- b c a )
   390  0d81 b475                   ldy MSB+2, x
   391  0d83 b574                   lda MSB+1, x
   392  0d85 9575                   sta MSB+2, x
   393  0d87 b573                   lda MSB  , x
   394  0d89 9574                   sta MSB+1, x
   395  0d8b 9473                   sty MSB  , x
   396  0d8d b43d                   ldy LSB+2, x
   397  0d8f b53c                   lda LSB+1, x
   398  0d91 953d                   sta LSB+2, x
   399  0d93 b53b                   lda LSB  , x
   400  0d95 953c                   sta LSB+1, x
   401  0d97 943b                   sty LSB  , x
   402  0d99 60                     rts

; ******** Source: durexforth.asm
   169                          

; ******** Source: math.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; UM/MOD by Garth Wilson
    24                          ; http://6502.org/source/integers/ummodfix/ummodfix.htm
    25                          
    26                          ; U< - UM* UM/MOD M+ INVERT NEGATE ABS * DNEGATE M* 0< S>D FM/MOD /MOD UD/MOD
    27                          
    28  9f15 02553c9a0d             +BACKLINK "u<", 2
    29                          U_LESS
    30  0d9a a000                   ldy #0
    31  0d9c b573                   lda	MSB, x
    32  0d9e d574                   cmp	MSB + 1, x
    33  0da0 9009                   bcc .false
    34  0da2 d006                   bne	.true
    35                              ; ok, msb are equal...
    36  0da4 b53c                   lda	LSB + 1, x
    37  0da6 d53b                   cmp	LSB, x
    38  0da8 b001                   bcs	.false
    39                          .true
    40  0daa 88                     dey
    41                          .false
    42  0dab e8                     inx
    43  0dac 9473                   sty	MSB, x
    44  0dae 943b                   sty	LSB, x
    45  0db0 60                     rts
    46                          
    47  9f11 012db10d               +BACKLINK "-", 1
    48                          MINUS
    49  0db1 b53c                   lda	LSB + 1, x
    50  0db3 38                     sec
    51  0db4 f53b                   sbc LSB, x
    52  0db6 953c                   sta	LSB + 1, x
    53                          
    54  0db8 b574                   lda MSB + 1, x
    55  0dba f573                   sbc MSB, x
    56  0dbc 9574                   sta MSB + 1, x
    57                          
    58  0dbe e8                     inx
    59  0dbf 60                     rts
    60                          
    61                          product = W
    62                          
    63  9f0b 03554d2ac00d           +BACKLINK "um*", 3
    64                          ; wastes W, W2, y
    65                          U_M_STAR
    66  0dc0 a900                   lda #$00
    67  0dc2 858d                   sta product+2 ; clear upper bits of product
    68  0dc4 858e                   sta product+3
    69  0dc6 a010                   ldy #$10 ; set binary count to 16
    70                          .shift_r
    71  0dc8 5674                   lsr MSB + 1, x ; multiplier+1 ; divide multiplier by 2
    72  0dca 763c                   ror LSB + 1, x ; multiplier
    73  0dcc 900b                   bcc rotate_r
    74  0dce a58d                   lda product+2 ; get upper half of product and add multiplicand
    75  0dd0 18                     clc
    76  0dd1 753b                   adc LSB, x ; multiplicand
    77  0dd3 858d                   sta product+2
    78  0dd5 a58e                   lda product+3
    79  0dd7 7573                   adc MSB, x ; multiplicand+1
    80                          rotate_r
    81  0dd9 6a                     ror ; rotate partial product
    82  0dda 858e                   sta product+3
    83  0ddc 668d                   ror product+2
    84  0dde 668c                   ror product+1
    85  0de0 668b                   ror product
    86  0de2 88                     dey
    87  0de3 d0e3                   bne .shift_r
    88                          
    89  0de5 a58b                   lda	product
    90  0de7 953c                   sta	LSB + 1, x
    91  0de9 a58c                   lda	product + 1
    92  0deb 9574                   sta	MSB + 1, x
    93  0ded a58d                   lda	product + 2
    94  0def 953b                   sta	LSB, x
    95  0df1 a58e                   lda	product + 3
    96  0df3 9573                   sta	MSB, x
    97  0df5 60                     rts
    98                          
    99  9f02 06554d2f4d4f44f6...    +BACKLINK "um/mod", 6
   100                          UM_DIV_MOD
   101                          ; ( lsw msw divisor -- rem quot )
   102                          ; Wastes W, lo(W2)
   103                                  N = W
   104  0df6 38                         SEC
   105  0df7 b53c                       LDA     LSB+1,X     ; Subtract hi cell of dividend by
   106  0df9 f53b                       SBC     LSB,X     ; divisor to see if there's an overflow condition.
   107  0dfb b574                       LDA     MSB+1,X
   108  0dfd f573                       SBC     MSB,X
   109  0dff b030                       BCS     oflo    ; Branch if /0 or overflow.
   110                          
   111  0e01 a911                       LDA     #17     ; Loop 17x.
   112  0e03 858b                       STA     N       ; Use N for loop counter.
   113  0e05 363d               loop:   ROL     LSB+2,X     ; Rotate dividend lo cell left one bit.
   114  0e07 3675                       ROL     MSB+2,X
   115  0e09 c68b                       DEC     N       ; Decrement loop counter.
   116  0e0b f02e                       BEQ     end     ; If we're done, then branch to end.
   117  0e0d 363c                       ROL     LSB+1,X     ; Otherwise rotate dividend hi cell left one bit.
   118  0e0f 3674                       ROL     MSB+1,X
   119  0e11 a900                       lda     #0
   120  0e13 858c                       sta     N+1
   121  0e15 268c                       ROL     N+1     ; Rotate the bit carried out of above into N+1.
   122                          
   123  0e17 38                         SEC
   124  0e18 b53c                       LDA     LSB+1,X     ; Subtract dividend hi cell minus divisor.
   125  0e1a f53b                       SBC     LSB,X
   126  0e1c 858d                       STA     N+2     ; Put result temporarily in N+2 (lo byte)
   127  0e1e b574                       LDA     MSB+1,X
   128  0e20 f573                       SBC     MSB,X
   129  0e22 a8                         TAY             ; and Y (hi byte).
   130  0e23 a58c                       LDA     N+1     ; Remember now to bring in the bit carried out above.
   131  0e25 e900                       SBC     #0
   132  0e27 90dc                       BCC     loop
   133                          
   134  0e29 a58d                       LDA     N+2     ; If that didn't cause a borrow,
   135  0e2b 953c                       STA     LSB+1,X     ; make the result from above to
   136  0e2d 9474                       STY     MSB+1,X     ; be the new dividend hi cell
   137  0e2f b0d4                       bcs     loop    ; and then branch up.
   138                          
   139  0e31 a9ff               oflo:   LDA     #$FF    ; If overflow or /0 condition found,
   140  0e33 953c                       STA     LSB+1,X     ; just put FFFF in both the remainder
   141  0e35 9574                       STA     MSB+1,X
   142  0e37 953d                       STA     LSB+2,X     ; and the quotient.
   143  0e39 9575                       STA     MSB+2,X
   144                          
   145  0e3b e8                 end:    INX
   146  0e3c 4ca90b                     jmp SWAP
   147                          
   148  9efd 024d2b3f0e             +BACKLINK "m+", 2
   149                          M_PLUS
   150  0e3f a000                   ldy #0
   151  0e41 b573                   lda MSB,x
   152  0e43 1001                   bpl +
   153  0e45 88                     dey
   154  0e46 18                 +   clc
   155  0e47 b53b                   lda LSB,x
   156  0e49 753d                   adc LSB+2,x
   157  0e4b 953d                   sta LSB+2,x
   158  0e4d b573                   lda MSB,x
   159  0e4f 7575                   adc MSB+2,x
   160  0e51 9575                   sta MSB+2,x
   161  0e53 98                     tya
   162  0e54 753c                   adc LSB+1,x
   163  0e56 953c                   sta LSB+1,x
   164  0e58 98                     tya
   165  0e59 7574                   adc MSB+1,x
   166  0e5b 9574                   sta MSB+1,x
   167  0e5d e8                     inx
   168  0e5e 60                     rts
   169                          
   170  9ef4 06494e564552545f...    +BACKLINK "invert", 6
   171                          INVERT
   172  0e5f b573                   lda MSB, x
   173  0e61 49ff                   eor #$ff
   174  0e63 9573                   sta MSB, x
   175  0e65 b53b                   lda LSB, x
   176  0e67 49ff                   eor #$ff
   177  0e69 953b                   sta LSB,x
   178  0e6b 60                     rts
   179                          
   180  9eeb 064e45474154456c...    +BACKLINK "negate", 6
   181                          NEGATE
   182  0e6c 205f0e                 jsr INVERT
   183  0e6f 4cdb0b                 jmp ONEPLUS
   184                          
   185  9ee5 03414253720e           +BACKLINK "abs", 3
   186                          ABS
   187  0e72 b573                   lda MSB,x
   188  0e74 30f6                   bmi NEGATE
   189  0e76 60                     rts
   190                          
   191                          DABS_STAR           ; ( n1 n2 -- ud1 )
   192  0e77 b573                   lda MSB,x       ;   ud1 = abs(n1) * abs(n2)
   193  0e79 5574                   eor MSB+1,x     ;   with final sign output in A register
   194  0e7b 48                     pha
   195  0e7c 20720e                 jsr ABS
   196  0e7f e8                     inx
   197  0e80 20720e                 jsr ABS
   198  0e83 ca                     dex
   199  0e84 20c00d                 jsr U_M_STAR
   200  0e87 68                     pla
   201  0e88 60                     rts
   202                          
   203  9ee1 012a890e               +BACKLINK "*", 1
   204  0e89 20770e                 jsr DABS_STAR
   205  0e8c e8                     inx
   206  0e8d 29ff                   and #$ff
   207  0e8f 30db                   bmi NEGATE
   208  0e91 60                     rts
   209                          
   210  9ed7 07444e4547415445...    +BACKLINK "dnegate", 7
   211                          DNEGATE
   212  0e92 205f0e                 jsr INVERT
   213  0e95 e8                     inx
   214  0e96 205f0e                 jsr INVERT
   215  0e99 ca                     dex
   216  0e9a f63c                   inc LSB+1,x
   217  0e9c d00a                   bne +
   218  0e9e f674                   inc MSB+1,x
   219  0ea0 d006                   bne +
   220  0ea2 f63b                   inc LSB,x
   221  0ea4 d002                   bne +
   222  0ea6 f673                   inc MSB,x
   223  0ea8 60                 +   rts
   224                          
   225  9ed2 024d2aa90e             +BACKLINK "m*", 2
   226  0ea9 20770e                 jsr DABS_STAR
   227  0eac 30e4                   bmi DNEGATE
   228  0eae 60                     rts
   229                          
   230  9ecd 02303caf0e             +BACKLINK "0<", 2
   231                          ZERO_LESS
   232  0eaf b573                   lda MSB,x
   233  0eb1 2980                   and #$80
   234  0eb3 f002                   beq +
   235  0eb5 a9ff                   lda #$ff
   236  0eb7 9573               +   sta MSB,x
   237  0eb9 953b                   sta LSB,x
   238  0ebb 60                     rts
   239                          
   240  9ec7 03533e44bc0e           +BACKLINK "s>d", 3
   241                          S_TO_D
   242  0ebc 20ba0b                 jsr DUP
   243  0ebf 4caf0e                 jmp ZERO_LESS
   244                          
   245  9ebe 06464d2f4d4f44c2...    +BACKLINK "fm/mod", 6
   246                          FM_DIV_MOD
   247  0ec2 b573                   lda MSB,x
   248  0ec4 8de20e                 sta DIVISOR_SIGN
   249  0ec7 1008                   bpl +
   250  0ec9 206c0e                 jsr NEGATE
   251  0ecc e8                     inx
   252  0ecd 20920e                 jsr DNEGATE
   253  0ed0 ca                     dex
   254  0ed1 b574               +   lda MSB+1,x
   255  0ed3 1009                   bpl +
   256  0ed5 20c10c                 jsr TUCK
   257  0ed8 20eb0b                 jsr PLUS
   258  0edb 20a90b                 jsr SWAP
   259  0ede 20f60d             +   jsr UM_DIV_MOD
   260                          DIVISOR_SIGN = * + 1
   261  0ee1 a9ff                   lda #$ff        ; placeholder
   262  0ee3 1005                   bpl +
   263  0ee5 e8                     inx
   264  0ee6 206c0e                 jsr NEGATE
   265  0ee9 ca                     dex
   266  0eea 60                 +   rts
   267                          
   268  9eb7 042f4d4f44eb0e         +BACKLINK "/mod", 4
   269  0eeb b573                   lda MSB,x
   270  0eed 9572                   sta MSB-1,x
   271  0eef b53b                   lda LSB,x
   272  0ef1 953a                   sta LSB-1,x
   273  0ef3 e8                     inx
   274  0ef4 20bc0e                 jsr S_TO_D
   275  0ef7 ca                     dex
   276  0ef8 4cc20e                 jmp FM_DIV_MOD
   277                          
   278                              ; (ud1 u2 -- urem udquot)
   279  9eae 0655442f4d4f44fb...    +BACKLINK "ud/mod", 6
   280  0efb b53b                   lda LSB,x
   281  0efd 953a                   sta LSB - 1,x
   282  0eff 859e                   sta W3
   283  0f01 b573                   lda MSB,x
   284  0f03 9572                   sta MSB - 1,x
   285  0f05 859f                   sta W3 + 1		; cache the divisor
   286  0f07 a900                   lda #0
   287  0f09 953b                   sta LSB,x
   288  0f0b 9573                   sta MSB,x
   289  0f0d ca                     dex
   290  0f0e 20f60d                 jsr UM_DIV_MOD	; divide the high word
   291  0f11 b53b                   lda LSB,x
   292  0f13 48                     pha
   293  0f14 b573                   lda MSB,x
   294  0f16 48                     pha		        ; cache the high word of quotient
   295  0f17 a59e                   lda W3		    ; uncache the divisor
   296  0f19 953b                   sta LSB,x
   297  0f1b a59f                   lda W3 + 1
   298  0f1d 9573                   sta MSB,x
   299  0f1f 20f60d                 jsr UM_DIV_MOD	; divide the low byte
   300  0f22 ca                     dex
   301  0f23 68                     pla 		    ; push the high word of quotient
   302  0f24 9573                   sta MSB,x
   303  0f26 68                     pla
   304  0f27 953b                   sta LSB,x
   305  0f29 60                     rts

; ******** Source: durexforth.asm
   170                          

; ******** Source: move.asm
     1                          ; routines adapted from cc65
     2                          ; original by Ullrich von Bassewitz, Christian Krueger, Greg King
     3                          
     4                          SRC = W
     5                          DST = W2
     6                          LEN = W3
     7                          
     8                          cmove_getparams:
     9  0f2a b53b               	lda	LSB, x
    10  0f2c 859e               	sta	LEN
    11  0f2e b573               	lda	MSB, x
    12  0f30 859f               	sta	LEN + 1
    13  0f32 b53c               	lda	LSB + 1, x
    14  0f34 858d               	sta	DST
    15  0f36 b574               	lda	MSB + 1, x
    16  0f38 858e               	sta	DST + 1
    17  0f3a b53d               	lda	LSB + 2, x
    18  0f3c 858b               	sta	SRC
    19  0f3e b575               	lda	MSB + 2, x
    20  0f40 858c               	sta	SRC + 1
    21  0f42 60                 	rts
    22                          
    23                          CMOVE_BACK
    24  0f43 8a                 	txa
    25  0f44 48                 	pha
    26  0f45 202a0f             	jsr cmove_getparams
    27                              ; copy downwards. adjusts pointers to the end of memory regions.
    28  0f48 a58c                   lda SRC + 1
    29  0f4a 18                     clc
    30  0f4b 659f                   adc LEN + 1
    31  0f4d 858c                   sta SRC + 1
    32  0f4f a58e                   lda DST + 1
    33  0f51 18                     clc
    34  0f52 659f                   adc LEN + 1
    35  0f54 858e                   sta DST + 1
    36                          
    37  0f56 a49e                   ldy LEN
    38  0f58 d006                   bne .entry
    39  0f5a f00b                   beq .pagesizecopy
    40                          .copybyte
    41  0f5c b18b                   lda (SRC),y
    42  0f5e 918d                   sta (DST),y
    43                          .entry
    44  0f60 88                     dey
    45  0f61 d0f9                   bne .copybyte
    46  0f63 b18b                   lda (SRC),y
    47  0f65 918d                   sta (DST),y
    48                          .pagesizecopy
    49  0f67 a69f                   ldx LEN + 1
    50  0f69 f04a                   beq cmove_done
    51                          .initbase
    52  0f6b c68c                   dec SRC + 1
    53  0f6d c68e                   dec DST + 1
    54  0f6f 88                     dey
    55  0f70 b18b                   lda (SRC),y
    56  0f72 918d                   sta (DST),y
    57  0f74 88                     dey
    58                          .copybytes
    59  0f75 b18b                   lda (SRC),y
    60  0f77 918d                   sta (DST),y
    61  0f79 88                     dey
    62  0f7a b18b                   lda (SRC),y
    63  0f7c 918d                   sta (DST),y
    64  0f7e 88                     dey
    65  0f7f d0f4                   bne .copybytes
    66  0f81 b18b                   lda (SRC),y
    67  0f83 918d                   sta (DST),y
    68  0f85 ca                     dex
    69  0f86 d0e3                   bne .initbase
    70  0f88 4cb50f             	jmp cmove_done
    71                          
    72                          CMOVE
    73  0f8b 8a                     txa
    74  0f8c 48                     pha
    75  0f8d 202a0f             	jsr cmove_getparams
    76  0f90 a000               	ldy #0
    77  0f92 a69f               	ldx	LEN + 1
    78  0f94 f013               	beq	.l2
    79                          .l1
    80  0f96 b18b               	lda	(SRC),y ; copy byte
    81  0f98 918d               	sta	(DST),y
    82  0f9a c8                 	iny
    83  0f9b b18b               	lda	(SRC),y ; copy byte again, to make it faster
    84  0f9d 918d               	sta	(DST),y
    85  0f9f c8                 	iny
    86  0fa0 d0f4               	bne .l1
    87  0fa2 e68c               	inc	SRC + 1
    88  0fa4 e68e               	inc DST + 1
    89  0fa6 ca                 	dex ; next 256-byte block
    90  0fa7 d0ed               	bne .l1
    91                          .l2
    92  0fa9 a69e               	ldx	LEN
    93  0fab f008               	beq cmove_done
    94                          .l3
    95  0fad b18b               	lda (SRC),y
    96  0faf 918d               	sta	(DST),y
    97  0fb1 c8                 	iny
    98  0fb2 ca                 	dex
    99  0fb3 d0f8               	bne	.l3
   100                          cmove_done
   101  0fb5 68                 	pla
   102  0fb6 18                     clc
   103  0fb7 6903               	adc #3
   104  0fb9 aa                 	tax
   105  0fba 60                 	rts
   106                          
   107  9ea7 044d4f5645bb0f         +BACKLINK "move", 4
   108                          MOVE
   109  0fbb 20c70c                 jsr TO_R
   110  0fbe 20d50b                 jsr TWODUP
   111  0fc1 209a0d                 jsr U_LESS
   112  0fc4 20dd0c                 jsr R_TO
   113  0fc7 20a90b                 jsr SWAP
   114  0fca 20ff16                 jsr ZBRANCH
   115  0fcd d20f                   !word .br
   116  0fcf 4c430f                 jmp CMOVE_BACK
   117                          .br = *
   118  0fd2 4c8b0f                 jmp CMOVE

; ******** Source: durexforth.asm
   171                          

; ******** Source: interpreter.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; QUIT INTERPRET FIND FIND-NAME >CFA PARSE-NAME WORD EXECUTE EVALUATE ' ABORT /STRING
    24                          
    25                          restore_handler
    26  0fd5 48                     pha             ; save a
    27  0fd6 8a                     txa             ; copy x
    28  0fd7 48                     pha             ; save x
    29  0fd8 98                     tya             ; copy y
    30  0fd9 48                     pha             ; save y
    31  0fda a97f                   lda	#$7f        ; disable all CIA 2 interrupts
    32  0fdc 8d0ddd                 sta	$dd0d       ;
    33  0fdf ac0ddd                 ldy	$dd0d       ; save CIA 2 interrupt control register for kernal_nmi
    34  0fe2 1003                   bpl brk_handler ; CIA 2 is not the NMI source if the most significant bit is not set.
    35                          
    36                          kernal_nmi
    37  0fe4 4c72fe                 jmp $fe72       ; all CIA 2 NMI's fall through to the Kernals' RS-232 routines
    38                          
    39                          
    40                          brk_handler         ; all non-CIA NMI (RESTORE key) and brk instructions- via IRQ vector end up here.
    41  0fe7 68                     pla             ; drop y -the return stack will be reset by QUIT anyway
    42  0fe8 68                     pla             ; pull x
    43  0fe9 aa                     tax             ; restore parameter stack pointer for QUIT
    44  0fea 4c5e10                 jmp QUIT        ; already under sei from NMI stub in Kernal or from IRQ to brk_handler
    45                          
    46                          quit_reset
    47  0fed 78                     sei             ; goes here from QUIT and program start
    48                          
    49  0fee a9d5                   lda #<restore_handler
    50  0ff0 8d1803                 sta $318
    51  0ff3 a90f                   lda #>restore_handler
    52  0ff5 8d1903                 sta $319
    53                          
    54  0ff8 a9e7                   lda #<brk_handler
    55  0ffa 8d1603                 sta $316
    56  0ffd a90f                   lda #>brk_handler
    57  0fff 8d1703                 sta $317
    58                          
    59  1002 58                     cli ; still have to
    60                          
    61                              ; lores
    62  1003 a99b                   lda #$9b
    63  1005 8d11d0                 sta $d011
    64  1008 a917                   lda #$17
    65  100a 8d00dd                 sta $dd00
    66  100d 8d18d0                 sta $d018
    67                          
    68  1010 8a                     txa
    69  1011 48                     pha
    70                          
    71  1012 a200                   ldx #0
    72  1014 8e20d0                 stx $d020
    73  1017 8e21d0                 stx $d021
    74                          
    75  101a a902                   lda #>TIB
    76  101c 8d7118                 sta TIB_PTR + 1
    77                          
    78  101f a936                   lda #$36 ; ram + i/o + kernal
    79  1021 8501                   sta 1
    80                          
    81                              ; Yellow text.
    82  1023 a907                   lda #7
    83  1025 8d8602                 sta $286
    84                          
    85                              ; Clears color area.
    86  1028 9d00d8             -   sta $d800, x
    87  102b 9d00d9                 sta $d900, x
    88  102e 9d00da                 sta $da00, x
    89  1031 9d00db                 sta $db00, x
    90  1034 ca                     dex
    91  1035 d0f1                   bne -
    92                          
    93  1037 8e7915                 stx     STATE
    94  103a 8e7218                 stx     TIB_SIZE
    95  103d 8e7318                 stx     TIB_SIZE + 1
    96  1040 8e7018                 stx     TIB_PTR
    97  1043 8e8218                 stx     TO_IN_W
    98  1046 8e8318                 stx     TO_IN_W + 1
    99  1049 8e7518                 stx     SOURCE_ID_LSB
   100  104c 8e7718                 stx     SOURCE_ID_MSB
   101  104f 8ed318                 stx     SAVE_INPUT_STACK_DEPTH
   102  1052 8e9417                 stx     READ_EOF
   103                          
   104  1055 20291b                 jsr     close_all_logical_files
   105  1058 20ccff                 jsr     CLRCHN
   106                          
   107  105b 68                     pla
   108  105c aa                     tax
   109  105d 60                     rts
   110                          
   111  9ea0 04515549545e10         +BACKLINK "quit", 4
   112                          QUIT
   113  105e 20ed0f                 jsr quit_reset
   114                          
   115                              ; resets the return stack
   116  1061 8a                     txa
   117                          INIT_S = * + 1
   118  1062 a200                   ldx #0
   119  1064 9a                     txs
   120  1065 aa                     tax
   121                          
   122                          interpret_loop
   123  1066 209317                 jsr REFILL
   124                          
   125  1069 206f10                 jsr interpret_tib
   126  106c 4c6610                 jmp interpret_loop
   127                          
   128                          interpret_tib
   129  106f 20e110                 jsr INTERPRET
   130  1072 e001                   cpx #X_INIT+1
   131  1074 1034                   bpl .on_stack_underflow
   132  1076 ad8218                 lda TO_IN_W
   133  1079 cd7218                 cmp TIB_SIZE
   134  107c d0f1                   bne interpret_tib
   135  107e ad8318                 lda TO_IN_W + 1
   136  1081 cd7318                 cmp TIB_SIZE + 1
   137  1084 d0e9                   bne interpret_tib
   138                          
   139                              ; 0 - keyboard, -1 evaluate, else file
   140  1086 ad7518                 lda SOURCE_ID_LSB
   141  1089 f001                   beq +
   142  108b 60                     rts
   143  108c ad371b             +   lda LATEST_LSB
   144  108f 38                     sec
   145  1090 ed7416                 sbc HERE_LSB
   146  1093 ad391b                 lda LATEST_MSB
   147  1096 ed7616                 sbc HERE_MSB
   148  1099 f021                   beq .on_data_underflow
   149  109b a94f                   lda #'o'
   150  109d 205ae9                 jsr PUTCHR
   151  10a0 a94b                   lda #'k'
   152  10a2 205ae9                 jsr PUTCHR
   153  10a5 a90d                   lda #$d
   154  10a7 4c5ae9                 jmp PUTCHR
   155                          
   156                          .on_stack_underflow
   157  10aa a912                   lda #$12 ; reverse on
   158  10ac 205ae9                 jsr PUTCHR
   159  10af a945                   lda #'e'
   160  10b1 205ae9                 jsr PUTCHR
   161  10b4 a952                   lda #'r'
   162  10b6 205ae9                 jsr PUTCHR
   163  10b9 4c4011                 jmp .stop_error_print
   164                          
   165                          .on_data_underflow
   166  10bc a912                   lda #$12 ; reverse on
   167  10be 205ae9                 jsr PUTCHR
   168  10c1 a946                   lda #'f'
   169  10c3 205ae9                 jsr PUTCHR
   170  10c6 a955                   lda #'u'
   171  10c8 205ae9                 jsr PUTCHR
   172  10cb a94c                   lda #'l'
   173  10cd 205ae9                 jsr PUTCHR
   174  10d0 a90d                   lda #$d
   175  10d2 4c5ae9                 jmp PUTCHR
   176                          
   177  9e96 0745584543555445...    +BACKLINK "execute", 7
   178                          EXECUTE
   179  10d5 b53b                   lda LSB, x
   180  10d7 858b                   sta W
   181  10d9 b573                   lda MSB, x
   182  10db 858c                   sta W + 1
   183  10dd e8                     inx
   184  10de 6c8b00                 jmp (W)
   185                          
   186  9e8a 09494e5445525052...    +BACKLINK "interpret", 9
   187                          INTERPRET
   188  10e1 208212                 jsr PARSE_NAME
   189                          
   190  10e4 b53b                   lda LSB,x
   191  10e6 d003                   bne +
   192  10e8 e8                     inx
   193  10e9 e8                     inx
   194  10ea 60                     rts
   195                          +
   196  10eb 20d50b                 jsr TWODUP
   197  10ee 209611                 jsr FIND_NAME ; ( caddr u 0 | caddr u nt )
   198  10f1 b573                   lda MSB, x
   199  10f3 d015                   bne .found_word
   200                          
   201  10f5 e8                     inx
   202  10f6 20ea13                 jsr READ_NUMBER
   203  10f9 f003                   beq .was_number
   204                          
   205  10fb 4c3611                 jmp print_word_not_found_error
   206                          
   207                              ; yep, it's a number...
   208                          .was_number
   209  10fe ad7915                 lda STATE ; are we compiling?
   210  1101 d001                   bne +
   211  1103 60                     rts
   212                          +   ; yes, compile the number
   213  1104 8dfb14                 sta curr_word_no_tail_call_elimination
   214  1107 4c5216                 jmp LITERAL
   215                          
   216                          .found_word
   217                              ; OK, we found a word...
   218                          
   219  110a b573                   lda MSB, x
   220  110c b43b                   ldy LSB, x
   221  110e e8                     inx
   222  110f 9573                   sta MSB, x
   223  1111 943b                   sty LSB, x
   224  1113 9574                   sta MSB+1, x
   225  1115 943c                   sty LSB+1, x
   226  1117 202112                 jsr TO_XT
   227  111a 20a90b                 jsr SWAP
   228  111d 200412                 jsr GET_IMMED ; ( xt 1 | xt -1 )
   229  1120 e8                     inx
   230                          
   231  1121 adfb14                 lda curr_word_no_tail_call_elimination
   232  1124 8dfc14                 sta last_word_no_tail_call_elimination
   233                          FOUND_WORD_WITH_NO_TCE = * + 1
   234  1127 a900                   lda #0
   235  1129 8dfb14                 sta curr_word_no_tail_call_elimination
   236                          
   237                              ; Executes the word if it is immediate, or interpreting.
   238  112c b572                   lda MSB-1, x
   239  112e 2d7915                 and STATE
   240  1131 f0a2                   beq EXECUTE
   241                          
   242                              ; OK, this word should be compiled...
   243  1133 4c4a16                 jmp COMPILE_COMMA
   244                          
   245  9e7f 084e4f54464f554e...    +BACKLINK "notfound",8
   246                          print_word_not_found_error ; ( caddr u -- )
   247  1136 a912                   lda #$12 ; reverse on
   248  1138 205ae9                 jsr PUTCHR
   249  113b 205a17                 jsr TYPE
   250  113e a93f                   lda #'?'
   251                          .stop_error_print
   252  1140 205ae9                 jsr PUTCHR
   253                          
   254  1143 a90d                   lda #$d ; cr
   255  1145 205ae9                 jsr PUTCHR
   256  1148 4cc113                 jmp ABORT
   257                          
   258  9e7b 01274b11               +BACKLINK "'", 1
   259  114b 208212                 jsr PARSE_NAME
   260  114e 20d50b                 jsr TWODUP
   261  1151 209611                 jsr FIND_NAME
   262  1154 e8                     inx
   263  1155 b572                   lda MSB-1,x
   264  1157 f0dd                   beq print_word_not_found_error
   265  1159 b43a               +   ldy LSB-1, x
   266  115b 943b                   sty LSB, x
   267  115d 9573                   sta MSB, x
   268  115f 943c                   sty LSB+1, x
   269  1161 9574                   sta MSB+1, x
   270  1163 202112                 jsr TO_XT
   271  1166 20a90b                 jsr SWAP
   272  1169 200412                 jsr GET_IMMED
   273  116c e8                     inx
   274  116d 60                     rts
   275                          
   276  9e74 0446494e446e11         +BACKLINK "find", 4
   277                          FIND ; ( xt -1 | xt 1 | caddr 0 )
   278  116e 20ba0b                 jsr DUP
   279  1171 20c70c                 jsr TO_R
   280  1174 20770c                 jsr COUNT
   281  1177 209611                 jsr FIND_NAME
   282  117a b573                   lda MSB, x
   283  117c f011                   beq +
   284  117e 20ba0b                 jsr DUP
   285  1181 202112                 jsr TO_XT
   286  1184 20a90b                 jsr SWAP
   287  1187 200412                 jsr GET_IMMED
   288  118a 20dd0c                 jsr R_TO
   289  118d e8                     inx
   290  118e 60                     rts
   291  118f e8                 +   inx
   292  1190 20dd0c                 jsr R_TO
   293  1193 4c7b0b                 jmp ZERO
   294                          
   295                          FIND_BUFFER = $33c
   296                          FIND_BUFFER_SIZE = 31
   297                          
   298  9e68 0946494e442d4e41...    +BACKLINK "find-name", 9
   299                          FIND_NAME ; ( caddr u -- nt | 0 )
   300  1196 e8                     inx
   301  1197 b53a                   lda LSB-1,x
   302  1199 a8                     tay
   303  119a f03e                   beq .find_failed
   304  119c c920                   cmp #FIND_BUFFER_SIZE+1
   305  119e b03a                   bcs .find_failed
   306  11a0 8dc811                 sta .findlen + 1
   307                          
   308  11a3 b573                   lda MSB,x
   309  11a5 858e                   sta W2+1
   310  11a7 b53b                   lda LSB,x
   311  11a9 858d                   sta W2
   312                          
   313  11ab 88                     dey
   314  11ac b18d               -   lda (W2),y
   315  11ae 20a419                 jsr CHAR_TO_LOWERCASE
   316  11b1 993c03                 sta FIND_BUFFER,y
   317  11b4 88                     dey
   318  11b5 10f5                   bpl -
   319                          
   320  11b7 ad371b                 lda LATEST_LSB
   321  11ba 858b                   sta W
   322  11bc ad391b                 lda LATEST_MSB
   323  11bf 858c                   sta W + 1
   324                              ; W now contains new dictionary pointer.
   325  11c1 a000                   ldy #0
   326  11c3 b18b                   lda (W), y ; get string length of dictionary word
   327                          .examine_word
   328  11c5 291f                   and #STRLEN_MASK
   329                          .findlen
   330  11c7 c9ff                   cmp #$ff ; overwritten
   331  11c9 f013                   beq .string_compare
   332                          
   333                          .string_compare_failed
   334                              ; no match, advance the dp
   335  11cb 18                     clc
   336  11cc 6903                   adc #3
   337  11ce 658b                   adc W
   338  11d0 858b                   sta W
   339  11d2 9002                   bcc +
   340  11d4 e68c                   inc W + 1
   341  11d6 b18b               +   lda (W), y
   342                              ; Is word null? If not, examine it.
   343  11d8 d0eb                   bne .examine_word
   344                          
   345                              ; It is null - give up.
   346                          .find_failed
   347  11da e8                     inx
   348  11db 4c7b0b                 jmp ZERO
   349                          
   350                          .string_compare
   351                              ; equal strlen, now compare strings...
   352  11de a8                     tay
   353  11df b18b               -   lda (W), y
   354  11e1 d93b03                 cmp FIND_BUFFER - 1, y
   355  11e4 d015                   bne .word_not_equal
   356  11e6 88                     dey
   357  11e7 d0f6                   bne -
   358                          
   359                              ; word is equal!
   360                              ; return address to dictionary word
   361  11e9 a000                   ldy #0
   362  11eb b18b                   lda (W), y
   363                              ; Immediate words are exempt from TCE because custom compile-time behavior.
   364                              ; (E.g. DROP compiles inx instead of jsr DROP.)
   365  11ed 29c0                   and #F_NO_TAIL_CALL_ELIMINATION | F_IMMEDIATE
   366  11ef 8d2811                 sta FOUND_WORD_WITH_NO_TCE
   367  11f2 a58b                   lda W
   368  11f4 953b                   sta LSB, x
   369  11f6 a58c                   lda W + 1
   370  11f8 9573                   sta MSB, x
   371  11fa 60                     rts
   372                          
   373                          .word_not_equal
   374  11fb a000                   ldy #0
   375  11fd b18b                   lda (W), y
   376  11ff 291f                   and #STRLEN_MASK
   377  1201 4ccb11                 jmp .string_compare_failed
   378                          
   379                          GET_IMMED ; ( nt -- 1 | -1 )
   380  1204 b573                   lda MSB, x
   381  1206 858c                   sta W + 1
   382  1208 b53b                   lda LSB, x
   383  120a 858b                   sta W
   384  120c a000                   ldy #0
   385                          
   386  120e b18b                   lda (W), y ; a contains string length + mask
   387  1210 2980                   and #F_IMMEDIATE
   388  1212 f006                   beq .not_immed
   389  1214 9473                   sty MSB, x ; 0
   390  1216 c8                     iny
   391  1217 943b                   sty LSB, x ; 1
   392  1219 60                     rts
   393                          
   394                          .not_immed
   395  121a a9ff                   lda #$ff
   396  121c 953b                   sta LSB, x
   397  121e 9573                   sta MSB, x
   398  1220 60                     rts
   399                          
   400  9e62 033e58542112           +BACKLINK ">xt", 3
   401                          TO_XT
   402  1221 b573                   lda MSB, x
   403  1223 858c                   sta W + 1
   404  1225 b53b                   lda LSB, x
   405  1227 858b                   sta W
   406                              ; W contains pointer to word
   407  1229 a000                   ldy #0
   408  122b b18b                   lda (W), y ; a contains string length + mask
   409  122d 291f                   and #STRLEN_MASK
   410  122f 18                     clc
   411  1230 6901                   adc #1 ; offset for char + string length
   412  1232 753b                   adc LSB, x
   413  1234 953b                   sta LSB, x
   414  1236 9002                   bcc +
   415  1238 f673                   inc MSB, x
   416  123a 20430c             +   jsr FETCH
   417  123d 60                     rts
   418                          
   419                          IS_SPACE ; ( c -- f )
   420  123e a001                   ldy #1
   421  1240 b53b                   lda LSB,x
   422  1242 c9a0                   cmp #' ' | 0x80
   423  1244 f007                   beq .is_space
   424  1246 a920                   lda #' '
   425  1248 d53b                   cmp LSB,x
   426  124a b001                   bcs .is_space
   427  124c 88                     dey
   428                          .is_space:
   429  124d 943b                   sty LSB,x
   430  124f 9473                   sty MSB,x
   431  1251 60                     rts
   432                          
   433                          IS_NOT_SPACE ; ( c -- f )
   434  1252 203e12                 jsr IS_SPACE
   435  1255 4c0f0c                 jmp ZEQU
   436                          
   437                          XT_SKIP ; ( addr n xt -- addr n )
   438                              ; skip all chars satisfying xt
   439  1258 20c70c                 jsr TO_R
   440  125b 20ba0b             -   jsr DUP
   441  125e 20ff16                 jsr ZBRANCH
   442  1261 7d12                   !word .done
   443  1263 20cb0b                 jsr OVER
   444  1266 20660c                 jsr FETCHBYTE
   445  1269 20f30c                 jsr R_FETCH
   446  126c 20d510                 jsr EXECUTE
   447  126f 20ff16                 jsr ZBRANCH
   448  1272 7d12                   !word .done
   449  1274 20810b                 jsr ONE
   450  1277 20c613                 jsr SLASH_STRING
   451  127a 4c5b12                 jmp -
   452                          .done
   453  127d 20dd0c                 jsr R_TO
   454  1280 e8                     inx
   455  1281 60                     rts
   456                          
   457  9e55 0a50415253452d4e...    +BACKLINK "parse-name", 10
   458                          PARSE_NAME ; ( name -- addr u )
   459  1282 205918                 jsr SOURCE
   460  1285 207b18                 jsr TO_IN
   461  1288 20430c                 jsr FETCH
   462  128b 20c613                 jsr SLASH_STRING
   463  128e 200816                 jsr LIT
   464  1291 3e12                   !word IS_SPACE
   465  1293 205812                 jsr XT_SKIP
   466  1296 20cb0b                 jsr OVER
   467  1299 20c70c                 jsr TO_R
   468  129c 200816                 jsr LIT
   469  129f 5212                   !word IS_NOT_SPACE
   470  12a1 205812                 jsr XT_SKIP
   471  12a4 20d50b                 jsr TWODUP
   472  12a7 20810b                 jsr ONE
   473  12aa 20b10c                 jsr MIN
   474  12ad 20eb0b                 jsr PLUS
   475  12b0 205918                 jsr SOURCE
   476  12b3 e8                     inx
   477  12b4 20b10d                 jsr MINUS
   478  12b7 207b18                 jsr TO_IN
   479  12ba 202d0c                 jsr STORE
   480  12bd e8                     inx
   481  12be 20dd0c                 jsr R_TO
   482  12c1 20c10c                 jsr TUCK
   483  12c4 4cb10d                 jmp MINUS
   484                          
   485                          ; WORD ( delim -- strptr )
   486  9e4e 04574f5244c712         +BACKLINK "word", 4
   487                          WORD
   488  12c7 207b0b                 jsr ZERO
   489  12ca 207316                 jsr HERE
   490  12cd 20570c                 jsr STOREBYTE
   491                          
   492                              ; skips initial delimiters.
   493  12d0 202818             -   jsr GET_CHAR_FROM_TIB
   494  12d3 f036                   beq .word_end
   495  12d5 200f13                 jsr .is_delim
   496  12d8 f0f6                   beq -
   497  12da 4ce712                 jmp .append
   498                          
   499  12dd 202818             -   jsr GET_CHAR_FROM_TIB
   500  12e0 f029                   beq .word_end
   501  12e2 200f13                 jsr .is_delim
   502  12e5 f024                   beq .word_end
   503                          
   504                          .append
   505  12e7 20750b                 jsr pushya
   506                          
   507  12ea 207316                 jsr HERE
   508  12ed 20660c                 jsr FETCHBYTE
   509  12f0 20db0b                 jsr ONEPLUS
   510  12f3 207316                 jsr HERE
   511  12f6 20570c                 jsr STOREBYTE
   512                          
   513  12f9 207316                 jsr HERE
   514  12fc 207316                 jsr HERE
   515  12ff 20660c                 jsr FETCHBYTE
   516  1302 20eb0b                 jsr PLUS
   517  1305 20570c                 jsr STOREBYTE
   518  1308 4cdd12                 jmp -
   519                          
   520                          .word_end
   521  130b e8                     inx
   522  130c 4c7316                 jmp HERE
   523                          
   524                          .is_delim
   525                              ; a == delim?
   526  130f d53b                   cmp LSB,x
   527  1311 f008                   beq + ; yes
   528                          
   529                              ; delim == space?
   530  1313 b43b                   ldy LSB,x
   531  1315 c020                   cpy #K_SPACE
   532  1317 d002                   bne + ; no
   533                          
   534                              ; compare with nonbreaking space, too
   535  1319 c9a0                   cmp #K_SPACE | $80
   536  131b 60                 +   rts
   537                          
   538  9e43 084556414c554154...    +BACKLINK "evaluate", 8
   539                          EVALUATE
   540  131c 20e818                 jsr SAVE_INPUT
   541  131f b53c                   lda LSB + 1, x
   542  1321 8d7018                 sta TIB_PTR
   543  1324 b574                   lda MSB + 1, x
   544  1326 8d7118                 sta TIB_PTR + 1
   545  1329 20eb0b                 jsr PLUS
   546  132c b53b                   lda LSB, x
   547  132e 8dbf13                 sta .bufend
   548  1331 b573                   lda MSB, x
   549  1333 8dc013                 sta .bufend + 1
   550  1336 e8                     inx
   551                          
   552  1337 205e13                 jsr evaluate_get_new_line
   553  133a a0ff                   ldy #$ff
   554  133c 8c7518                 sty SOURCE_ID_LSB
   555  133f 8c7718                 sty SOURCE_ID_MSB
   556                          
   557                          .eval_loop
   558  1342 ad7118                 lda TIB_PTR + 1
   559  1345 cdc013                 cmp .bufend + 1
   560  1348 900b                   bcc +
   561  134a ad7018                 lda TIB_PTR
   562  134d cdbf13                 cmp .bufend
   563  1350 9003                   bcc +
   564  1352 4c2319                 jmp RESTORE_INPUT ; exit
   565                          +
   566  1355 206f10                 jsr interpret_tib
   567  1358 209317                 jsr REFILL
   568  135b 4c4213                 jmp .eval_loop
   569                          
   570                          evaluate_get_new_line
   571  135e a000                   ldy #0
   572  1360 8c8218                 sty TO_IN_W
   573  1363 8c8318                 sty TO_IN_W + 1
   574                          
   575                              ; Determines TIB_SIZE.
   576  1366 ad7018                 lda TIB_PTR
   577  1369 858b                   sta W
   578  136b ad7118                 lda TIB_PTR + 1
   579  136e 858c                   sta W + 1
   580                          .findtibsizeloop
   581  1370 adc013                 lda .bufend + 1
   582  1373 c58c                   cmp W + 1
   583  1375 901a                   bcc .foundeol
   584  1377 d007                   bne +
   585  1379 a58b                   lda W
   586  137b cdbf13                 cmp .bufend
   587  137e b011                   bcs .foundeol
   588                          +
   589  1380 a000                   ldy #0
   590  1382 b18b                   lda (W),y
   591  1384 c90d                   cmp #K_RETURN
   592  1386 f009                   beq .foundeol
   593                          
   594  1388 e68b                   inc W
   595  138a d002                   bne +
   596  138c e68c                   inc W + 1
   597                          +
   598  138e 4c7013                 jmp .findtibsizeloop
   599                          
   600                          .foundeol
   601  1391 a58b                   lda W
   602  1393 38                     sec
   603  1394 ed7018                 sbc TIB_PTR
   604  1397 8d7218                 sta TIB_SIZE
   605  139a a58c                   lda W + 1
   606  139c ed7118                 sbc TIB_PTR + 1
   607  139f 8d7318                 sta TIB_SIZE + 1
   608  13a2 60                     rts
   609                          
   610                          evaluate_consume_tib
   611  13a3 ad7018                 lda TIB_PTR
   612  13a6 18                     clc
   613  13a7 6d7218                 adc TIB_SIZE
   614  13aa 8d7018                 sta TIB_PTR
   615  13ad ad7118                 lda TIB_PTR + 1
   616  13b0 6d7318                 adc TIB_SIZE + 1
   617  13b3 8d7118                 sta TIB_PTR + 1
   618                          
   619  13b6 ee7018                 inc TIB_PTR ; skip cr
   620  13b9 d003                   bne +
   621  13bb ee7118                 inc TIB_PTR + 1
   622  13be 60                 +   rts
   623                          
   624                          .bufend
   625  13bf 0000                   !word 0
   626                          
   627  9e3b 0541424f5254c113       +BACKLINK "abort", 5
   628                          ABORT
   629  13c1 a200                   ldx #X_INIT ; reset stack
   630  13c3 4c5e10                 jmp QUIT
   631                          
   632  9e31 072f535452494e47...    +BACKLINK "/string", 7
   633                          SLASH_STRING ; ( addr u n -- addr u )
   634  13c6 20ba0b                 jsr DUP
   635  13c9 20c70c                 jsr TO_R
   636  13cc 20b10d                 jsr MINUS
   637  13cf 20a90b                 jsr SWAP
   638  13d2 20dd0c                 jsr R_TO
   639  13d5 20eb0b                 jsr PLUS
   640  13d8 4ca90b                 jmp SWAP
   641                          
   642                          apply_base
   643  13db 8d7a0d                 sta BASE
   644  13de cea514                 dec .chars_to_process
   645  13e1 e69e                   inc W3
   646  13e3 d002                   bne +
   647  13e5 e69f                   inc W3+1
   648  13e7 b19e               +   lda (W3),y
   649  13e9 60                     rts
   650                          
   651                          ; Z = success, NZ = fail
   652                          ; success: ( caddr u -- number )
   653                          ; fail: ( caddr u -- caddr u )
   654                          READ_NUMBER
   655  13ea b53b                   lda LSB,x
   656  13ec 8da514                 sta .chars_to_process
   657  13ef b574                   lda MSB+1,x
   658  13f1 859f                   sta W3+1
   659  13f3 b53c                   lda LSB+1,x
   660  13f5 859e                   sta W3
   661                          
   662  13f7 ad7a0d                 lda BASE
   663  13fa 8d6f14                 sta OLD_BASE
   664                          
   665  13fd a000                   ldy #0
   666  13ff 8c7f14                 sty .negate
   667  1402 ca                     dex
   668  1403 ca                     dex
   669  1404 943c                   sty LSB+1,x
   670  1406 9474                   sty MSB+1,x
   671  1408 9473                   sty MSB,x
   672                          
   673  140a b19e                   lda (W3), y
   674  140c c927                   cmp #"'"
   675  140e f077                   beq .parse_char
   676                          
   677  1410 c923                   cmp #"#"
   678  1412 d005                   bne .check_decimal
   679  1414 a90a                   lda #10
   680  1416 20db13                 jsr apply_base
   681                          
   682                          .check_decimal
   683  1419 c924                   cmp #"$"
   684  141b d005                   bne .check_binary
   685  141d a910                   lda #16
   686  141f 20db13                 jsr apply_base
   687                          
   688                          .check_binary
   689  1422 c925                   cmp #"%"
   690  1424 d005                   bne .check_negate
   691  1426 a902                   lda #2
   692  1428 20db13                 jsr apply_base
   693                          
   694                          .check_negate
   695  142b c92d                   cmp #"-"
   696  142d d01a                   bne .loop_entry
   697  142f ee7f14                 inc .negate
   698  1432 4c6914                 jmp .prepare_next_char
   699                          
   700                          .next_digit
   701                              ; number *= BASE
   702  1435 ad7a0d                 lda BASE
   703  1438 953b                   sta LSB,x
   704  143a 20c00d                 jsr U_M_STAR
   705  143d b53b                   lda LSB,x
   706  143f d061                   bne .parse_failed ; overflow!
   707                          
   708  1441 e69e                   inc W3
   709  1443 d002                   bne +
   710  1445 e69f                   inc W3+1
   711  1447 b19e               +   lda (W3), y
   712                          
   713                          .loop_entry
   714  1449 20a419                 jsr CHAR_TO_LOWERCASE
   715                          
   716  144c 18                     clc
   717  144d 69d0                   adc #-$30 ; petscii 0-9 -> 0-9
   718                          
   719  144f c90a                   cmp #10 ; within 0-9?
   720  1451 9007                   bcc +
   721                          
   722  1453 18                     clc
   723  1454 69f9                   adc #-$7 ; a-f..?
   724                          
   725  1456 c90a                   cmp #10
   726  1458 9048                   bcc .parse_failed
   727                          
   728  145a cd7a0d             +   cmp BASE
   729  145d b043                   bcs .parse_failed
   730                          
   731  145f 753c                   adc LSB+1,x
   732  1461 953c                   sta LSB+1,x
   733  1463 9004                   bcc .prepare_next_char
   734  1465 f674                   inc MSB+1,x
   735  1467 f039                   beq .parse_failed
   736                          .prepare_next_char
   737  1469 cea514                 dec .chars_to_process
   738  146c d0c7                   bne .next_digit
   739                          
   740                          .parse_done
   741                          OLD_BASE = * + 1
   742  146e a900                   lda #0
   743  1470 8d7a0d                 sta BASE
   744                          
   745  1473 b53c                   lda LSB+1,x
   746  1475 953e                   sta LSB+3,x
   747  1477 b574                   lda MSB+1,x
   748  1479 9576                   sta MSB+3,x
   749  147b e8                     inx
   750  147c e8                     inx
   751  147d e8                     inx
   752                          .negate = * + 1
   753  147e a900                   lda #0
   754  1480 f004                   beq +
   755  1482 206c0e                 jsr NEGATE
   756  1485 98                     tya ; clear Z flag
   757  1486 60                 +   rts
   758                          
   759                          .parse_char
   760  1487 ada514                 lda .chars_to_process
   761  148a c903                   cmp #3
   762  148c d014                   bne .parse_failed
   763  148e a002                   ldy #2
   764  1490 b19e                   lda (W3),y
   765  1492 c927                   cmp #"'"
   766  1494 d00c                   bne .parse_failed
   767  1496 88                     dey
   768  1497 b19e                   lda (W3),y
   769  1499 953c                   sta LSB+1,x
   770  149b a900                   lda #0
   771  149d 9574                   sta MSB+1,x
   772  149f 4c6e14                 jmp .parse_done
   773                          
   774                          .parse_failed
   775  14a2 e8                     inx
   776  14a3 e8                     inx ; Z flag set
   777  14a4 60                     rts
   778                          
   779                          .chars_to_process
   780  14a5 00                     !byte 0
   781                          
   782  9e27 07444f574f524453...+BACKLINK "dowords", 7 ; ( xt -- )
   783                              ; to be useful, nothing must be left on stack before execute
   784                              ; so that there is no distance between nt and the rest of the stack
   785  14a6 b53b                   lda LSB,x
   786  14a8 8ddd14                 sta .xt
   787  14ab b573                   lda MSB, x
   788  14ad 8dde14                 sta .xt + 1
   789  14b0 e8                     inx
   790  14b1 ad371b                 lda LATEST_LSB
   791  14b4 8df914                 sta .dowords_nametoken
   792  14b7 ad391b                 lda LATEST_MSB
   793  14ba 8dfa14                 sta .dowords_nametoken + 1
   794                          
   795                          .dowords_lambda
   796  14bd adf914                 lda .dowords_nametoken
   797  14c0 858b                   sta W
   798  14c2 adfa14                 lda .dowords_nametoken + 1
   799  14c5 858c                   sta W + 1
   800  14c7 a000                   ldy #0
   801  14c9 b18b                   lda (W), y
   802  14cb d001                   bne +
   803  14cd 60                 -   rts
   804  14ce 291f               +   and #STRLEN_MASK
   805  14d0 48                     pha
   806  14d1 ca                     dex
   807  14d2 adf914                 lda .dowords_nametoken
   808  14d5 953b                   sta LSB, x
   809  14d7 adfa14                 lda .dowords_nametoken + 1
   810  14da 9573                   sta MSB, x
   811                          .xt = * + 1
   812  14dc 200012                 jsr PLACEHOLDER_ADDRESS
   813  14df e8                     inx
   814  14e0 68                     pla
   815  14e1 b43a                   ldy LSB-1, x
   816  14e3 f0e8                   beq -
   817  14e5 18                     clc
   818  14e6 6903                   adc #3 ; guaranteed carry clear
   819  14e8 6df914                 adc .dowords_nametoken
   820  14eb 8df914                 sta .dowords_nametoken
   821  14ee adfa14                 lda .dowords_nametoken + 1
   822  14f1 6900                   adc #0
   823  14f3 8dfa14                 sta .dowords_nametoken + 1
   824  14f6 4cbd14                 jmp .dowords_lambda
   825                          ; using a word here in case the lambda trashes Ws
   826                          .dowords_nametoken
   827  14f9 0000                   !word 0

; ******** Source: durexforth.asm
   172                          

; ******** Source: compiler.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; C, , ; IMMEDIATE [ ] STATE : HEADER LIT LITC COMPILE, LITERAL HERE DODOES
    24                          
    25                          curr_word_no_tail_call_elimination
    26  14fb 01                     !byte 1
    27                          last_word_no_tail_call_elimination
    28  14fc 01                     !byte 1
    29                          
    30  9e22 02432cfd14             +BACKLINK "c,", 2
    31                          CCOMMA
    32  14fd ad7416                 lda	HERE_LSB
    33  1500 858b                   sta	W
    34  1502 ad7616                 lda	HERE_MSB
    35  1505 858c                   sta	W + 1
    36                          
    37  1507 a000                   ldy	#0
    38  1509 b53b                   lda	LSB, x
    39  150b 918b                   sta	(W), y
    40                          
    41                              ; update HERE
    42  150d ee7416                 inc	HERE_LSB
    43  1510 d003                   bne	+
    44  1512 ee7616                 inc HERE_MSB
    45  1515 e8                 +   inx
    46  1516 60                     rts
    47                          
    48  9e1e 012c1715               +BACKLINK ",", 1
    49                          COMMA
    50  1517 ad7416                 lda	HERE_LSB
    51  151a 858b                   sta	W
    52  151c ad7616                 lda	HERE_MSB
    53  151f 858c                   sta	W + 1
    54                          
    55  1521 a000                   ldy	#0
    56  1523 b53b                   lda	LSB, x
    57  1525 918b                   sta	(W), y
    58  1527 c8                     iny
    59  1528 b573                   lda	MSB, x
    60  152a 918b                   sta	(W), y
    61                          
    62                              ; update HERE
    63  152c ad7416                 lda	HERE_LSB
    64  152f 18                     clc
    65  1530 6902                   adc	#2
    66  1532 8d7416                 sta	HERE_LSB
    67  1535 9003                   bcc	+
    68  1537 ee7616                 inc HERE_MSB
    69                          +
    70  153a e8                     inx
    71  153b 60                     rts
    72                          
    73                          ; -----
    74                          
    75  9e1a 815b3c15               +BACKLINK "[", 1 | F_IMMEDIATE
    76                          LBRAC
    77  153c a900                   lda	#0
    78  153e 8d7915                 sta	STATE
    79  1541 60                     rts
    80                          
    81                          ; -----
    82                          
    83                              ; Exempt from TCE because `: x [ ] ;` does not compile a jsr.
    84  9e16 415d4215               +BACKLINK "]", 1 | F_NO_TAIL_CALL_ELIMINATION
    85                          RBRAC
    86  1542 a901                   lda	#1
    87  1544 8d7915                 sta	STATE
    88  1547 60                     rts
    89                          
    90  9e12 813b4815               +BACKLINK ";", 1 | F_IMMEDIATE
    91                          SEMICOLON
    92  1548 202317                 jsr EXIT
    93                          
    94                              ; Unhides the word.
    95                          PENDING_LATEST_MSB = * + 1
    96  154b a900                   lda #0
    97  154d f00d                   beq +
    98  154f 8d391b                 sta	LATEST_MSB
    99                          PENDING_LATEST_LSB = * + 1
   100  1552 a900                   lda	#0
   101  1554 8d371b                 sta LATEST_LSB
   102  1557 a900                   lda #0
   103  1559 8d4c15                 sta PENDING_LATEST_MSB
   104                          +
   105                          
   106                              ; go back to IMMEDIATE mode.
   107  155c 4c3c15                 jmp LBRAC
   108                          
   109  9e06 09494d4d45444941...    +BACKLINK "immediate", 9
   110  155f a000                   ldy #0
   111  1561 ad371b                 lda LATEST_LSB
   112  1564 858b                   sta W
   113  1566 ad391b                 lda LATEST_MSB
   114  1569 858c                   sta W + 1
   115  156b b18b                   lda	(W), y
   116  156d 0980                   ora	#F_IMMEDIATE
   117  156f 918b                   sta	(W), y
   118  1571 60                     rts
   119                          
   120                          ; STATE - Is the interpreter executing code (0) or compiling a word (non-zero)?
   121  9dfe 0553544154457215       +BACKLINK "state", 5
   122  1572 a979a0154c750b         +VALUE	STATE
   123                          STATE
   124  1579 0000                   !word 0
   125                          
   126  9df3 084c415445535458...    +BACKLINK "latestxt", 8
   127                          LATEST_XT_LSB = * + 1
   128                          LATEST_XT_MSB = * + 3
   129  157b a900a0004c750b         +VALUE	0
   130                          
   131                              ; Exempt from TCE because `: x ;` does not compile a jsr.
   132  9def 413a8215               +BACKLINK ":", 1 | F_NO_TAIL_CALL_ELIMINATION
   133                          COLON
   134  1582 ad371b                 lda LATEST_LSB
   135  1585 48                     pha
   136  1586 ad391b                 lda LATEST_MSB
   137  1589 48                     pha
   138                          
   139  158a 20b015                 jsr HEADER ; makes the dictionary entry / header
   140                          
   141                              ; defer the LATEST update to ;
   142  158d ad371b                 lda LATEST_LSB
   143  1590 8d5315                 sta PENDING_LATEST_LSB
   144  1593 ad391b                 lda LATEST_MSB
   145  1596 8d4c15                 sta PENDING_LATEST_MSB
   146                          
   147  1599 68                     pla
   148  159a 8d391b                 sta LATEST_MSB
   149  159d 68                     pla
   150  159e 8d371b                 sta LATEST_LSB
   151                          
   152  15a1 ad7416                 lda HERE_LSB
   153  15a4 8d7c15                 sta LATEST_XT_LSB
   154  15a7 ad7616                 lda HERE_MSB
   155  15aa 8d7e15                 sta LATEST_XT_MSB
   156                          
   157  15ad 4c4215                 jmp RBRAC ; enter compile mode
   158                          
   159                          
   160                          ; --- HEADER ( name -- )
   161  9de6 06484541444552b0...    +BACKLINK "header", 6
   162                          HEADER
   163  15b0 eefc14                 inc last_word_no_tail_call_elimination
   164                          
   165                              ; update dictionary
   166                          
   167  15b3 208212             -   jsr PARSE_NAME
   168  15b6 b53b                   lda LSB,x
   169  15b8 d006                   bne +
   170  15ba 209317                 jsr REFILL
   171  15bd 4cb315                 jmp -
   172                          +
   173                              ; update dictionary pointer
   174  15c0 b53b                   lda LSB, x
   175  15c2 8df715                 sta .putlen+1
   176  15c5 18                     clc
   177  15c6 6903                   adc #3
   178  15c8 858b                   sta W
   179  15ca ad371b                 lda LATEST_LSB
   180  15cd 38                     sec
   181  15ce e58b                   sbc W
   182  15d0 8d371b                 sta LATEST_LSB
   183  15d3 858b                   sta W
   184  15d5 b003                   bcs +
   185  15d7 ce391b                 dec LATEST_MSB
   186                          +
   187  15da ad391b                 lda LATEST_MSB
   188  15dd 858c                   sta W + 1
   189  15df a000                   ldy #0
   190                              ; Store length byte.
   191  15e1 b53b                   lda LSB, x
   192  15e3 918b                   sta (W), y
   193  15e5 e8                     inx
   194  15e6 b53b                   lda LSB, x
   195  15e8 858d                   sta W2
   196  15ea b573                   lda MSB, x
   197  15ec 858e                   sta W2 + 1
   198                              ; copy string
   199  15ee b18d               -   lda (W2), y
   200  15f0 20a419                 jsr CHAR_TO_LOWERCASE
   201  15f3 c8                     iny
   202  15f4 918b                   sta (W), y
   203                          .putlen
   204  15f6 c000                   cpy #0
   205  15f8 d0f4                   bne -
   206                              ; store here
   207  15fa c8                     iny
   208  15fb ad7416                 lda HERE_LSB
   209  15fe 918b                   sta (W), y
   210  1600 c8                     iny
   211  1601 ad7616                 lda HERE_MSB
   212  1604 918b                   sta (W), y
   213  1606 e8                     inx
   214  1607 60                     rts
   215                          
   216  9de0 034c49540816           +BACKLINK "lit", 3
   217                          LIT
   218  1608 ca                     dex
   219                          
   220                              ; load IP
   221  1609 68                     pla
   222  160a 858b                   sta W
   223  160c 68                     pla
   224  160d 858c                   sta W + 1
   225                          
   226                              ; copy literal to stack
   227  160f a001                   ldy	#1
   228  1611 b18b                   lda	(W), y
   229  1613 953b                   sta	LSB, x
   230  1615 c8                     iny
   231  1616 b18b                   lda	(W), y
   232  1618 9573                   sta	MSB, x
   233                          
   234  161a a58b                   lda W
   235  161c 18                     clc
   236  161d 6903                   adc #3
   237  161f 8d2a16                 sta + + 1
   238  1622 a58c                   lda W + 1
   239  1624 6900                   adc #0
   240  1626 8d2b16                 sta + + 2
   241  1629 4c0012             +   jmp PLACEHOLDER_ADDRESS ; replaced with instruction pointer
   242                          
   243  9dd9 044c4954432c16         +BACKLINK "litc", 4
   244                          LITC
   245  162c ca                     dex
   246                          
   247                              ; load IP
   248  162d 68                     pla
   249  162e 858b                   sta W
   250  1630 68                     pla
   251  1631 858c                   sta W + 1
   252                          
   253  1633 e68b                   inc W
   254  1635 d002                   bne +
   255  1637 e68c                   inc W + 1
   256                          +
   257                              ; copy literal to stack
   258  1639 a000                   ldy	#0
   259  163b b18b                   lda	(W), y
   260  163d 953b                   sta	LSB, x
   261  163f 9473                   sty	MSB, x
   262                          
   263  1641 e68b                   inc W
   264  1643 d002                   bne +
   265  1645 e68c                   inc W + 1
   266  1647 6c8b00             +   jmp (W)
   267                          
   268  9dce 08434f4d50494c45...    +BACKLINK "compile,", 8
   269                          COMPILE_COMMA
   270  164a a920                   lda #OP_JSR
   271  164c 203f17                 jsr compile_a
   272  164f 4c1715                 jmp COMMA
   273                          
   274  9dc4 874c49544552414c...    +BACKLINK "literal", 7 | F_IMMEDIATE
   275                          LITERAL
   276  1652 ca                     dex
   277  1653 b574                   lda MSB+1,x
   278  1655 d00e                   bne +
   279  1657 a92c                   lda #<LITC
   280  1659 953b                   sta LSB,x
   281  165b a916                   lda #>LITC
   282  165d 9573                   sta MSB,x
   283  165f 204a16                 jsr COMPILE_COMMA
   284  1662 4cfd14                 jmp CCOMMA ; writes byte
   285                          +
   286  1665 a908                   lda #<LIT
   287  1667 953b                   sta LSB, x
   288  1669 a916                   lda #>LIT
   289  166b 9573                   sta MSB, x
   290  166d 204a16                 jsr COMPILE_COMMA
   291  1670 4c1715                 jmp COMMA ; writes number
   292                          
   293                          ; HERE - points to the next free byte of memory. When compiling, compiled words go here.
   294  9dbd 04484552457316         +BACKLINK "here", 4
   295                          HERE
   296                          HERE_LSB = * + 1
   297                          HERE_MSB = * + 3
   298  1673 a93da01b4c750b         +VALUE  load_base
   299                          
   300  9db4 06444f444f45537a...    +BACKLINK "dodoes", 6
   301                          
   302                              ; behavior pointer address => W
   303  167a 68                     pla
   304  167b 858b                   sta W
   305  167d 68                     pla
   306  167e 858c                   sta W + 1
   307                          
   308  1680 e68b                   inc W
   309  1682 d002                   bne +
   310  1684 e68c                   inc W + 1
   311                          +
   312                          
   313                              ; push data pointer to param stack
   314  1686 ca                     dex
   315  1687 a58b                   lda W
   316  1689 18                     clc
   317  168a 6902                   adc #2
   318  168c 953b                   sta LSB,x
   319  168e a58c                   lda W + 1
   320  1690 6900                   adc #0
   321  1692 9573                   sta MSB,x
   322                          
   323  1694 a000                   ldy #0
   324  1696 b18b                   lda (W),y
   325  1698 858d                   sta W2
   326  169a c8                     iny
   327  169b b18b                   lda (W),y
   328  169d 858e                   sta W2 + 1
   329  169f 6c8d00                 jmp (W2)
   330                          

; ******** Source: durexforth.asm
   173                          

; ******** Source: control.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; IF THEN BEGIN WHILE REPEAT BRANCH 0BRANCH UNLOOP EXIT
    24                          
    25  9daf 824946a216             +BACKLINK "if", 2 | F_IMMEDIATE
    26  16a2 200816                 jsr LIT
    27  16a5 ff16                   !word ZBRANCH
    28  16a7 204a16                 jsr COMPILE_COMMA
    29  16aa 207316                 jsr HERE
    30  16ad 207b0b                 jsr ZERO
    31  16b0 4c1715                 jmp COMMA
    32                          
    33  9da8 845448454eb316         +BACKLINK "then", 4 | F_IMMEDIATE
    34  16b3 207316                 jsr HERE
    35  16b6 20a90b                 jsr SWAP
    36  16b9 4c2d0c                 jmp STORE
    37                          
    38  9da0 85424547494ebc16       +BACKLINK "begin", 5 | F_IMMEDIATE
    39  16bc 4c7316                 jmp HERE
    40                          
    41  9d98 855748494c45bf16       +BACKLINK "while", 5 | F_IMMEDIATE
    42  16bf 200816                 jsr LIT
    43  16c2 ff16                   !word ZBRANCH
    44  16c4 204a16                 jsr COMPILE_COMMA
    45  16c7 207316                 jsr HERE
    46  16ca 207b0b                 jsr ZERO
    47  16cd 201715                 jsr COMMA
    48  16d0 4ca90b                 jmp SWAP
    49                          
    50                          COMPILE_JMP
    51  16d3 202c16                 jsr LITC
    52  16d6 4c                     !byte OP_JMP
    53  16d7 4cfd14                 jmp CCOMMA
    54                          
    55  9d8f 86524550454154da...    +BACKLINK "repeat", 6 | F_IMMEDIATE
    56  16da 20d316                 jsr COMPILE_JMP
    57  16dd 201715                 jsr COMMA
    58  16e0 207316                 jsr HERE
    59  16e3 20a90b                 jsr SWAP
    60  16e6 4c2d0c                 jmp STORE
    61                          
    62  9d86 064252414e4348e9...    +BACKLINK "branch", 6
    63                          BRANCH
    64  16e9 68                     pla
    65  16ea 858b                   sta W
    66  16ec 68                     pla
    67  16ed 858c                   sta W + 1
    68                          
    69  16ef a002                   ldy	#2
    70  16f1 b18b                   lda	(W), y
    71  16f3 8dfe16                 sta + + 2
    72  16f6 88                     dey
    73  16f7 b18b                   lda	(W), y
    74  16f9 8dfd16                 sta + + 1
    75  16fc 4c0012             +   jmp PLACEHOLDER_ADDRESS ; replaced with branch destination
    76                          
    77  9d7c 07304252414e4348...    +BACKLINK "0branch", 7
    78                          ZBRANCH
    79  16ff e8                     inx
    80  1700 b53a                   lda	LSB-1, x
    81  1702 1572                   ora	MSB-1, x
    82  1704 f0e3                   beq BRANCH
    83                          
    84                              ; skip offset
    85  1706 68                     pla
    86  1707 18                     clc
    87  1708 6902                   adc #2
    88  170a 9006                   bcc +
    89  170c a8                     tay
    90  170d 68                     pla
    91  170e 6900                   adc #0
    92  1710 48                     pha
    93  1711 98                     tya
    94  1712 48                 +   pha
    95  1713 60                     rts
    96                          
    97                              ; Exempt from TCE as top of return stack must contain a return address.
    98  9d73 46554e4c4f4f5014...    +BACKLINK "unloop",	6 | F_NO_TAIL_CALL_ELIMINATION
    99  1714 20dd0c                 jsr R_TO
   100  1717 20dd0c                 jsr R_TO
   101  171a 20dd0c                 jsr R_TO
   102  171d e8                     inx
   103  171e e8                     inx
   104  171f 20c70c                 jsr TO_R
   105  1722 60                     rts
   106                          
   107  9d6c 84455849542317         +BACKLINK "exit", 4 | F_IMMEDIATE
   108                          EXIT
   109  1723 adfc14                 lda last_word_no_tail_call_elimination
   110  1726 d015                   bne +
   111                              ; do tail call elimination: instead of adding a final rts,
   112                              ; replace the last jsr with a jmp.
   113  1728 ad7416                 lda HERE_LSB
   114  172b 38                     sec
   115  172c e903                   sbc #3
   116  172e a8                     tay
   117  172f ad7616                 lda HERE_MSB
   118  1732 e900                   sbc #0
   119  1734 8d3b17                 sta .instr_ptr + 1
   120  1737 a94c                   lda #OP_JMP
   121                          .instr_ptr = * + 1
   122  1739 990012                 sta PLACEHOLDER_ADDRESS,y ; replaced with instruction pointer
   123  173c 60                     rts
   124                          +
   125  173d a960                   lda #OP_RTS
   126                          compile_a
   127  173f ca                     dex
   128  1740 953b                   sta LSB, x
   129  1742 4cfd14                 jmp CCOMMA
   130                          

; ******** Source: durexforth.asm
   174                          

; ******** Source: io.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; TYPE EMIT PAGE KEY? KEY REFILL SOURCE SOURCE-ID >IN GETC CHAR
    24                          
    25  9d65 04454d49544517         +BACKLINK "emit", 4
    26                          EMIT
    27  1745 b53b                   lda	LSB, x
    28  1747 e8                     inx
    29  1748 4c5ae9                 jmp	PUTCHR
    30                          
    31  9d5e 04504147454b17         +BACKLINK "page", 4
    32                          PAGE
    33  174b a993                   lda #K_CLRSCR
    34  174d 4c5ae9                 jmp PUTCHR
    35                          
    36  9d58 035256535017           +BACKLINK "rvs", 3
    37                          RVS ; ( -- ) invert text output
    38  1750 a912                   lda #$12
    39  1752 4cd2ff                 jmp CHROUT
    40                          
    41  9d53 0243525517             +BACKLINK "cr", 2
    42                          CR ; ( -- )
    43  1755 a90d                   lda #$d
    44  1757 4cd2ff                 jmp CHROUT
    45                          
    46  9d4c 04545950455a17         +BACKLINK "type", 4
    47                          TYPE ; ( caddr u -- )
    48  175a a900                   lda #0 ; quote mode off
    49  175c 85d4                   sta $d4
    50  175e b53b               -   lda LSB,x
    51  1760 1573                   ora MSB,x
    52  1762 d003                   bne +
    53  1764 e8                     inx
    54  1765 e8                     inx
    55  1766 60                     rts
    56  1767 20cb0b             +   jsr OVER
    57  176a 20660c                 jsr FETCHBYTE
    58  176d 204517                 jsr EMIT
    59  1770 20810b                 jsr ONE
    60  1773 20c613                 jsr SLASH_STRING
    61  1776 4c5e17                 jmp -
    62                          
    63  9d45 044b45593f7917         +BACKLINK "key?", 4
    64  1779 a5c6                   lda $c6 ; Number of characters in keyboard buffer
    65  177b f002                   beq +
    66                          .pushtrue
    67  177d a9ff                   lda #$ff
    68  177f a8                 +   tay
    69  1780 4c750b                 jmp pushya
    70                          
    71  9d3f 034b45598317           +BACKLINK "key", 3
    72  1783 a5c6               -   lda $c6
    73  1785 f0fc                   beq -
    74  1787 868b                   stx W
    75  1789 20b4e5                 jsr $e5b4 ; Get character from keyboard buffer
    76  178c a68b                   ldx W
    77  178e a000                   ldy #0
    78  1790 4c750b                 jmp pushya
    79                          
    80  9d36 06524546494c4c93...    +BACKLINK "refill", 6
    81                          REFILL
    82                          
    83                          READ_EOF = * + 1
    84  1793 a900                   lda #0
    85  1795 f01c                   beq .not_eof
    86  1797 868b                   stx W
    87  1799 ad7518                 lda	SOURCE_ID_LSB
    88  179c 20c3ff                 jsr	CLOSE
    89  179f 202319                 jsr RESTORE_INPUT
    90  17a2 ae7518                 ldx SOURCE_ID_LSB
    91  17a5 f006                   beq +
    92  17a7 20c6ff                 jsr CHKIN
    93  17aa 4cb017                 jmp ++
    94  17ad 20ccff             +   jsr CLRCHN
    95  17b0 a68b               ++  ldx W
    96  17b2 60                     rts
    97                          .not_eof
    98  17b3 ad7718                 lda SOURCE_ID_MSB
    99  17b6 f006                   beq +
   100  17b8 20a313                 jsr evaluate_consume_tib
   101  17bb 4c5e13                 jmp evaluate_get_new_line
   102                          +
   103  17be a000                   ldy #0
   104  17c0 8c8218                 sty TO_IN_W
   105  17c3 8c8318                 sty TO_IN_W + 1
   106  17c6 8c7218                 sty TIB_SIZE
   107  17c9 8c7318                 sty TIB_SIZE + 1
   108                          
   109  17cc ad7518                 lda SOURCE_ID_LSB
   110  17cf f005                   beq .getLineFromConsole
   111  17d1 ad7718                 lda SOURCE_ID_MSB
   112  17d4 f01f                   beq	.getLineFromDisk
   113                          
   114                          .getLineFromConsole
   115  17d6 868b                   stx W
   116  17d8 a200                   ldx #0
   117  17da 2012e1             -   jsr $e112 ; Input Character
   118  17dd c90d                   cmp #$d
   119  17df f00b                   beq .gotReturn
   120  17e1 9d0002                 sta TIB,x
   121  17e4 e058                   cpx #$58 ; Default TIB area is $200-$258
   122  17e6 f0f2                   beq -
   123  17e8 e8                     inx
   124  17e9 4cda17                 jmp -
   125                          .gotReturn
   126  17ec 205ae9                 jsr PUTCHR
   127                              ; Set TIB_SIZE to number of chars fetched.
   128  17ef 8e7218                 stx TIB_SIZE
   129  17f2 a68b                   ldx W
   130  17f4 60                     rts
   131                          
   132                          .getLineFromDisk
   133  17f5 ad7018                 lda TIB_PTR
   134  17f8 858b                   sta W
   135  17fa ad7118                 lda TIB_PTR + 1
   136  17fd 858c                   sta W+1
   137  17ff 868d               -   stx W2
   138  1801 20cfff                 jsr	CHRIN
   139  1804 a68d                   ldx W2
   140  1806 48                     pha
   141  1807 20b7ff                 jsr	READST
   142  180a 8d9417                 sta READ_EOF
   143  180d 68                     pla
   144  180e 0900                   ora #0
   145  1810 f0ed                   beq -
   146  1812 c90d                   cmp #K_RETURN
   147  1814 f011                   beq +
   148  1816 ee20d0                 inc $d020
   149  1819 ac7218                 ldy TIB_SIZE
   150  181c 918b                   sta (W),y
   151  181e ee7218                 inc TIB_SIZE
   152  1821 ce20d0                 dec $d020
   153  1824 4cff17                 jmp -
   154  1827 60                 +   rts
   155                          
   156                          GET_CHAR_FROM_TIB
   157  1828 ad8218                 lda TO_IN_W
   158  182b cd7218                 cmp TIB_SIZE
   159  182e d00b                   bne +
   160  1830 ad8318                 lda TO_IN_W + 1
   161  1833 cd7318                 cmp TIB_SIZE + 1
   162  1836 d003                   bne +
   163  1838 a900                   lda #0
   164  183a 60                     rts
   165                          +
   166  183b 18                     clc
   167  183c ad7018                 lda TIB_PTR
   168  183f 6d8218                 adc TO_IN_W
   169  1842 858b                   sta W
   170  1844 ad7118                 lda TIB_PTR + 1
   171  1847 6d8318                 adc TO_IN_W + 1
   172  184a 858c                   sta W + 1
   173  184c a000                   ldy #0
   174  184e b18b                   lda (W),y
   175                          
   176  1850 ee8218                 inc TO_IN_W
   177  1853 d003                   bne +
   178  1855 ee8318                 inc TO_IN_W + 1
   179  1858 60                 +   rts
   180                          
   181  9d2d 06534f5552434559...    +BACKLINK "source", 6
   182                          SOURCE
   183  1859 ca                     dex
   184  185a ca                     dex
   185  185b ad7018                 lda TIB_PTR
   186  185e 953c                   sta LSB+1, x
   187  1860 ad7118                 lda TIB_PTR + 1
   188  1863 9574                   sta MSB+1, x
   189  1865 ad7218                 lda TIB_SIZE
   190  1868 953b                   sta LSB, x
   191  186a ad7318                 lda TIB_SIZE + 1
   192  186d 9573                   sta MSB, x
   193  186f 60                     rts
   194                          
   195                          TIB_PTR
   196  1870 0000                   !word 0
   197                          TIB_SIZE
   198  1872 0000                   !word 0
   199                          
   200  9d21 09534f555243452d...    +BACKLINK "source-id", 9
   201                          SOURCE_ID_LSB = * + 1
   202                          SOURCE_ID_MSB = * + 3
   203                              ; -1 : string (via evaluate)
   204                              ; 0 : keyboard
   205                              ; 1+ : file id
   206  1874 a900a0004c750b         +VALUE	0
   207                          
   208  9d1b 033e494e7b18           +BACKLINK ">in", 3
   209                          TO_IN
   210  187b a982a0184c750b         +VALUE TO_IN_W
   211                          TO_IN_W
   212  1882 0000                   !word 0
   213                          
   214  9d14 04474554438418         +BACKLINK "getc", 4
   215  1884 202818                 jsr GET_CHAR_FROM_TIB
   216  1887 d005                   bne +
   217  1889 209317                 jsr REFILL
   218  188c a90d                   lda #K_RETURN
   219  188e a000               +   ldy #0
   220  1890 4c750b                 jmp pushya
   221                          
   222  9d0d 04434841529318         +BACKLINK "char", 4
   223                          CHAR ; ( name -- char )
   224  1893 208212             -   jsr PARSE_NAME
   225  1896 b53b                   lda LSB,x
   226  1898 d008                   bne +
   227  189a e8                     inx
   228  189b e8                     inx
   229  189c 209317                 jsr REFILL
   230  189f 4c9318                 jmp -
   231  18a2 e8                 +   inx
   232  18a3 4c660c                 jmp FETCHBYTE
   233                          
   234                          SAVE_INPUT_STACK
   235  18a6 0000000000000000...    !fill 9*5
   236                          SAVE_INPUT_STACK_DEPTH
   237  18d3 00                     !byte 0
   238                          
   239                          push_input_stack
   240                              ; ! there is no check for stack overflow!
   241                              ; 5 is however enough for one EVALUATE and four DOS channels.
   242                              ; opening more than four channels gives "no channel" error on C64.
   243  18d4 acd318                 ldy SAVE_INPUT_STACK_DEPTH
   244  18d7 99a618                 sta SAVE_INPUT_STACK, y
   245  18da eed318                 inc SAVE_INPUT_STACK_DEPTH
   246  18dd 60                     rts
   247                          
   248                          pop_input_stack
   249  18de ced318                 dec SAVE_INPUT_STACK_DEPTH
   250  18e1 acd318                 ldy SAVE_INPUT_STACK_DEPTH
   251  18e4 b9a618                 lda SAVE_INPUT_STACK, y
   252  18e7 60                     rts
   253                          
   254                          SAVE_INPUT
   255  18e8 ad9417                 lda READ_EOF
   256  18eb 20d418                 jsr push_input_stack
   257  18ee a900                   lda #0
   258  18f0 8d9417                 sta READ_EOF
   259  18f3 ad8218                 lda TO_IN_W
   260  18f6 20d418                 jsr push_input_stack
   261  18f9 ad8318                 lda TO_IN_W+1
   262  18fc 20d418                 jsr push_input_stack
   263  18ff ad7518                 lda SOURCE_ID_LSB
   264  1902 20d418                 jsr push_input_stack
   265  1905 ad7718                 lda SOURCE_ID_MSB
   266  1908 20d418                 jsr push_input_stack
   267  190b ad7018                 lda TIB_PTR
   268  190e 20d418                 jsr push_input_stack
   269  1911 ad7118                 lda TIB_PTR+1
   270  1914 20d418                 jsr push_input_stack
   271  1917 ad7218                 lda TIB_SIZE
   272  191a 20d418                 jsr push_input_stack
   273  191d ad7318                 lda TIB_SIZE+1
   274  1920 4cd418                 jmp push_input_stack
   275                          
   276                          RESTORE_INPUT
   277  1923 20de18                 jsr pop_input_stack
   278  1926 8d7318                 sta TIB_SIZE+1
   279  1929 20de18                 jsr pop_input_stack
   280  192c 8d7218                 sta TIB_SIZE
   281  192f 20de18                 jsr pop_input_stack
   282  1932 8d7118                 sta TIB_PTR+1
   283  1935 20de18                 jsr pop_input_stack
   284  1938 8d7018                 sta TIB_PTR
   285  193b 20de18                 jsr pop_input_stack
   286  193e 8d7718                 sta SOURCE_ID_MSB
   287  1941 20de18                 jsr pop_input_stack
   288  1944 8d7518                 sta SOURCE_ID_LSB
   289  1947 20de18                 jsr pop_input_stack
   290  194a 8d8318                 sta TO_IN_W+1
   291  194d 20de18                 jsr pop_input_stack
   292  1950 8d8218                 sta TO_IN_W
   293  1953 20de18                 jsr pop_input_stack
   294  1956 8d9417                 sta READ_EOF
   295  1959 60                     rts
   296                          
   297                          ; handle errors returned by open,
   298                          ; close, and chkin. If ioresult is
   299                          ; nonzero, print error message and
   300                          ; abort.
   301  9d03 07494f41424f5254...    +BACKLINK "ioabort", 7
   302                          IOABORT ; ( ioresult -- )
   303  195a e8                     inx
   304  195b b572                   lda MSB-1,x
   305  195d d009                   bne .print_ioerr
   306  195f b53a                   lda LSB-1,x
   307  1961 d001                   bne +
   308  1963 60                     rts
   309  1964 c90a               +   cmp #10
   310  1966 9010                   bcc .print_basic_error
   311                          
   312                          .print_ioerr
   313  1968 a973                   lda #<.ioerr
   314  196a 858b                   sta W
   315  196c a919                   lda #>.ioerr
   316  196e 858c                   sta W+1
   317  1970 4c8a19                 jmp .print_msb_terminated_string
   318                          
   319                          .ioerr
   320  1973 494f4552               !text "ioer"
   321  1977 d2                     !byte 'r'|$80
   322                          
   323                          .print_basic_error
   324  1978 a937                   lda #$37
   325  197a 8501                   sta 1
   326                          
   327  197c b53a                   lda LSB-1,x
   328  197e 0a                     asl
   329  197f aa                     tax
   330  1980 bd26a3                 lda $a326,x
   331  1983 858b                   sta W
   332  1985 bd27a3                 lda $a327,x
   333  1988 858c                   sta W+1
   334                          
   335                          .print_msb_terminated_string
   336  198a 20ccff                 jsr CLRCHN
   337  198d 205017                 jsr RVS
   338                          
   339  1990 a000                   ldy #0
   340  1992 b18b               -   lda (W),y
   341  1994 48                     pha
   342  1995 297f                   and #$7f
   343  1997 20d2ff                 jsr CHROUT
   344  199a c8                     iny
   345  199b 68                     pla
   346  199c 10f4                   bpl -
   347                          
   348                          .cr_abort
   349  199e 205517                 jsr CR
   350  19a1 4cc113                 jmp ABORT

; ******** Source: durexforth.asm
   175                          

; ******** Source: lowercase.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2015 Johan Kotlinski
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          CHAR_TO_LOWERCASE ; ( a -- a )
    24  19a4 8db219                 sta .save
    25  19a7 38                     sec
    26  19a8 e9c1                   sbc #'a' + $80
    27  19aa c91a                   cmp #1 + 'z' - 'a'
    28  19ac b003                   bcs +
    29  19ae 6941                   adc #'a'
    30  19b0 60                     rts
    31                          +
    32                          .save = * + 1
    33  19b1 a900                   lda #0
    34  19b3 38                     sec
    35  19b4 e9c1                   sbc #'A'
    36  19b6 c91a                   cmp #1 + 'z' - 'a'
    37  19b8 b003                   bcs +
    38  19ba 6941                   adc #'a'
    39  19bc 60                     rts
    40                          +
    41  19bd adb219                 lda .save
    42  19c0 60                     rts

; ******** Source: durexforth.asm
   176                          

; ******** Source: disk.asm
     1                          ;{{{ The MIT License
     2                          ;
     3                          ;Copyright (c) 2008 Johan Kotlinski, Mats Andren
     4                          ;
     5                          ;Permission is hereby granted, free of charge, to any person obtaining a copy
     6                          ;of this software and associated documentation files (the "Software"), to deal
     7                          ;in the Software without restriction, including without limitation the rights
     8                          ;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     9                          ;copies of the Software, and to permit persons to whom the Software is
    10                          ;furnished to do so, subject to the following conditions:
    11                          ;
    12                          ;The above copyright notice and this permission notice shall be included in
    13                          ;all copies or substantial portions of the Software.
    14                          ;
    15                          ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    16                          ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    17                          ;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    18                          ;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    19                          ;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    20                          ;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    21                          ;THE SOFTWARE. }}}
    22                          
    23                          ; DEVICE LOADB SAVEB INCLUDED
    24                          
    25                          READST = $ffb7
    26                          SETLFS = $ffba
    27                          SETNAM = $ffbd
    28                          OPEN = $ffc0
    29                          CLOSE = $ffc3
    30                          CHKIN = $ffc6
    31                          CHKOUT = $ffc9
    32                          CLRCHN = $ffcc
    33                          CHRIN = $ffcf
    34                          CHROUT = $ffd2
    35                          LOAD = $ffd5
    36                          SAVE = $ffd8
    37                          
    38                          ; -----
    39                          
    40  9cfa 06444556494345c1...    +BACKLINK "device", 6
    41  19c1 b53b                   lda LSB,x
    42  19c3 85ba                   sta $ba
    43  19c5 e8                     inx
    44  19c6 60                     rts
    45                          
    46                          _errorchread
    47  19c7 a900                       LDA #$00      ; no filename
    48  19c9 aa                         tax
    49  19ca a8                         tay
    50  19cb 20bdff                     JSR SETNAM
    51  19ce a90f                       LDA #$0F      ; file number 15
    52  19d0 a6ba                       LDX $BA       ; last used device number
    53  19d2 d002                       BNE +
    54  19d4 a208                       LDX #$08      ; default to device 8
    55  19d6 a00f               +	    LDY #$0F      ; secondary address 15 (error channel)
    56  19d8 20baff                     JSR SETLFS
    57                          
    58  19db 20c0ff                     JSR OPEN
    59  19de b015                       BCS .error    ; if carry set, the file could not be opened
    60                          
    61  19e0 a20f                       LDX #$0F      ; filenumber 15
    62  19e2 20c6ff                     JSR CHKIN     ; file 15 now used as input
    63                          
    64  19e5 a000                       LDY #$00
    65  19e7 20b7ff             .loop   JSR READST    ; read status byte
    66  19ea d009                       BNE geof      ; either EOF or read error
    67  19ec 20cfff                     JSR CHRIN     ; get a byte from file
    68  19ef 20d2ff                     JSR CHROUT    ; print byte to screen
    69  19f2 4ce719                     JMP .loop     ; next byte
    70                          
    71                          geof
    72                          .error
    73                                  ; Accumulator contains BASIC error code
    74                          
    75                                  ; most likely error:
    76                                  ; A = $05 (DEVICE NOT PRESENT)
    77                          
    78                                  ; ... error handling for open errors ...
    79                          
    80                          .glose
    81  19f5 a90f                       LDA #$0F      ; filenumber 15
    82  19f7 20c3ff                     JSR CLOSE
    83  19fa 4cccff                     jmp CLRCHN
    84                          
    85                          
    86                          ; LOADB ( filenameptr filenamelen dst -- endaddress ) load binary file
    87                          ;  - s" base" 7000 loadb #load file to 7000
    88                          ;  - returns 0 on failure, otherwise address after last written byte
    89  9cf2 054c4f414442fd19       +BACKLINK "loadb", 5
    90                          LOADB
    91  19fd 8a                     txa
    92  19fe 48                     pha
    93                          
    94  19ff b573                   lda MSB, x		; >destination
    95  1a01 8d381a                 sta load_binary_laddr_hi
    96  1a04 b53b                   lda LSB, x		; <destination
    97  1a06 8d361a                 sta load_binary_laddr_lo
    98                          
    99  1a09 b53c                   lda LSB+1, x		; a filename length
   100  1a0b 48                     pha
   101  1a0c b475                   ldy MSB+2, x 		; y >basename
   102  1a0e b53d                   lda LSB+2, x		; x <basename
   103  1a10 aa                     tax
   104  1a11 68                     pla
   105  1a12 20321a                 jsr	load_binary
   106                          
   107  1a15 68                     pla
   108  1a16 aa                     tax
   109                          
   110  1a17 e8                     inx
   111  1a18 e8                     inx
   112                          load_binary_status = * + 1
   113  1a19 a900                   lda	#0 ; 0 = fail, ff = success
   114  1a1b d00c                   bne	.success
   115  1a1d 9573                   sta MSB,x
   116  1a1f 953b                   sta LSB,x
   117  1a21 8a                     txa
   118  1a22 48                     pha
   119  1a23 20c719                 jsr	_errorchread
   120  1a26 68                     pla
   121  1a27 aa                     tax
   122  1a28 60                     rts
   123                          .success:
   124  1a29 a5af                   lda $af
   125  1a2b 9573                   sta	MSB, x
   126  1a2d a5ae                   lda $ae
   127  1a2f 953b                   sta	LSB, x
   128  1a31 60                     rts
   129                          
   130                          load_binary
   131  1a32 20461a                 jsr .disk_io_setnamsetlfs
   132                          
   133                          load_binary_laddr_lo = *+1
   134  1a35 a2ff                   ldx #$ff	;<load_address
   135                          load_binary_laddr_hi = *+1
   136  1a37 a0ff                   ldy #$ff	;>load_address
   137  1a39 8c1a1a                 sty	load_binary_status
   138  1a3c a900                   lda #0		;0 = load to memory (no verify)
   139  1a3e 20d5ff                 jsr LOAD
   140  1a41 b00f                   bcs .disk_io_error
   141  1a43 4cccff                 jmp CLRCHN
   142                          
   143                          .disk_io_setnamsetlfs ;reused by both loadb and saveb
   144  1a46 20bdff                 jsr SETNAM
   145  1a49 a6ba                   ldx $ba     ; keep current device
   146  1a4b a901                   lda #1      ; logical file #
   147  1a4d a000                   ldy #0      ; if load: 0 = load to new address, if save: 0 = dunno, but okay...
   148  1a4f 4cbaff                 jmp SETLFS
   149                          
   150                          .disk_io_error
   151                              ; Accumulator contains BASIC error code
   152                          
   153                              ;... error handling ...
   154  1a52 a200                   ldx #$00      ; filenumber 0 = keyboard
   155  1a54 8e1a1a                 stx	load_binary_status
   156  1a57 4cccff                 jmp CLRCHN
   157                          
   158                          ; SAVEB (save binary file)
   159                          ;  - 7000 71ae s" base" saveb #save file from 7000 to 71ae (= the byte AFTER the last byte in the file)
   160  9cea 0553415645425a1a       +BACKLINK "saveb", 5
   161                          SAVEB
   162  1a5a 868b                   stx W
   163                          
   164  1a5c a5ae                   lda	$ae
   165  1a5e 48                     pha
   166  1a5f a5af                   lda	$af
   167  1a61 48                     pha
   168                          
   169  1a62 b53e                   lda LSB+3, x		; range begin lo
   170  1a64 85c1                   sta $c1
   171  1a66 b576                   lda MSB+3, x		; range begin hi
   172  1a68 85c2                   sta $c2
   173                          
   174  1a6a b53d                   lda LSB+2, x		; range end lo
   175  1a6c 8d811a                 sta save_binary_srange_end_lo
   176  1a6f b575                   lda MSB+2, x		; range end hi
   177  1a71 8d831a                 sta save_binary_srange_end_hi
   178                          
   179  1a74 b53b                   lda LSB, x		; a filename length
   180  1a76 48                     pha
   181  1a77 b474                   ldy MSB+1, x 		; y basename hi
   182  1a79 b53c                   lda LSB+1, x		; x basename lo
   183  1a7b aa                     tax
   184  1a7c 68                     pla
   185                          
   186  1a7d 20461a                 jsr .disk_io_setnamsetlfs
   187                          
   188                              ;This should point to the byte AFTER the last byte in the file.
   189                          save_binary_srange_end_lo = *+1
   190  1a80 a2ff                   ldx #$ff	;load_address lo
   191                          save_binary_srange_end_hi = *+1
   192  1a82 a0ff                   ldy #$ff	;load_address hi
   193  1a84 a9c1                   lda #$c1	;tell routine that start address is located in $c1/$c2
   194  1a86 20d8ff                 jsr SAVE
   195  1a89 20c719                 jsr _errorchread
   196                          
   197  1a8c 68                     pla
   198  1a8d 85af                   sta	$af
   199  1a8f 68                     pla
   200  1a90 85ae                   sta	$ae
   201                          
   202  1a92 a68b                   ldx W
   203  1a94 e8                     inx
   204  1a95 e8                     inx
   205  1a96 e8                     inx
   206  1a97 e8                     inx
   207  1a98 60                     rts
   208                          
   209  9cdf 08494e434c554445...    +BACKLINK "included", 8
   210                          INCLUDED
   211  1a99 b53b                   lda	LSB, x
   212  1a9b 8dd61a                 sta .filelen
   213  1a9e b574                   lda MSB+1, x
   214  1aa0 8dd81a                 sta .namehi
   215  1aa3 b53c                   lda LSB+1, x
   216  1aa5 8dda1a                 sta .namelo
   217  1aa8 e8                     inx
   218  1aa9 e8                     inx
   219                          
   220  1aaa 20e818                 jsr SAVE_INPUT
   221                          
   222                              ; Is TIB_PTR pointing to TIB?
   223  1aad ad7118                 lda	TIB_PTR+1
   224  1ab0 c902                   cmp #>TIB
   225  1ab2 d015                   bne .reset_tib_ptr_to_tib
   226                          
   227                              ; ...if yes: Adjust TIB_PTR to point past the current TIB content, to avoid clobbering.
   228  1ab4 ad8218                 lda TO_IN_W
   229  1ab7 cd7218                 cmp TIB_SIZE
   230  1aba f017                   beq .load_file ; If TIB is already consumed, no need to do anything.
   231  1abc ad7218                 lda TIB_SIZE
   232  1abf 18                     clc
   233  1ac0 6d7018                 adc TIB_PTR
   234  1ac3 8d7018                 sta TIB_PTR
   235  1ac6 4cd31a                 jmp .load_file
   236                          
   237                              ; ...if no: Reset TIB_PTR so that it points to TIB again.
   238                          .reset_tib_ptr_to_tib:
   239  1ac9 a900                   lda #<TIB
   240  1acb 8d7018                 sta TIB_PTR
   241  1ace a902                   lda #>TIB
   242  1ad0 8d7118                 sta TIB_PTR+1
   243                          
   244                          .load_file:
   245                          
   246  1ad3 8a                     txa
   247  1ad4 48                     pha
   248                          
   249                          .filelen = * + 1
   250  1ad5 a900                   lda #0
   251                          .namehi = * + 1
   252  1ad7 a000                   ldy #0
   253                          .namelo = * + 1
   254  1ad9 a200                   ldx #0
   255                          
   256                              ; open file
   257  1adb 20bdff                 jsr	SETNAM
   258  1ade a900                   lda #0
   259  1ae0 8d7718                 sta SOURCE_ID_MSB
   260  1ae3 ac7518                 ldy SOURCE_ID_LSB
   261  1ae6 c8                     iny
   262  1ae7 98                     tya
   263  1ae8 0908                   ora #8
   264  1aea a8                     tay
   265  1aeb 8c7518                 sty SOURCE_ID_LSB
   266                          
   267  1aee a6ba                   ldx	$ba ; last used device#
   268  1af0 20baff                 jsr	SETLFS
   269  1af3 20c0ff                 jsr	OPEN
   270  1af6 9007                   bcc	+
   271  1af8 a2ff                   ldx #-1
   272  1afa 953b                   sta LSB,x
   273  1afc 4c5a19                 jmp IOABORT
   274                          +
   275  1aff ae7518                 ldx	SOURCE_ID_LSB ; file number
   276  1b02 20c6ff                 jsr	CHKIN
   277                          
   278                              ; Skips load address. It is tempting to keep the source
   279                              ; code as .SEQ files instead of .PRG to avoid this step.
   280                              ; However, the advantage with .PRG is that loading/saving
   281                              ; files from text editor can be dramatically speeded up
   282                              ; by fast loader cartridges such as Retro Replay.
   283  1b05 20cfff                 JSR CHRIN     ; get a byte from file
   284  1b08 20cfff                 JSR CHRIN     ; get a byte from file
   285                          
   286  1b0b 20b7ff                 jsr READST
   287  1b0e f006                   beq +
   288  1b10 20c719                 jsr _errorchread
   289  1b13 4cc113                 jmp ABORT
   290                          +
   291  1b16 68                     pla
   292  1b17 aa                     tax
   293                          
   294                              ; interpret until EOF
   295  1b18 209317             -   jsr REFILL
   296  1b1b ad9417                 lda READ_EOF
   297  1b1e d006                   bne +
   298  1b20 206f10                 jsr interpret_tib
   299  1b23 4c181b                 jmp -
   300  1b26 4c6f10             +   jmp interpret_tib
   301                          
   302                          ; Used registers: A, X, Y
   303                          close_all_logical_files:
   304  1b29 a200                   ldx #0
   305  1b2b 8a                 -   txa
   306  1b2c 48                     pha
   307  1b2d 20c3ff                 jsr CLOSE
   308  1b30 68                     pla
   309  1b31 aa                     tax
   310  1b32 ca                     dex
   311  1b33 d0f6                   bne -
   312  1b35 60                     rts

; ******** Source: durexforth.asm
   177                          
   178                          
   179                          ; LATEST - points to the most recently defined dictionary word.
   180                          
   181  9cd6 064c415445535436...    +BACKLINK "latest", 6
   182                          LATEST
   183                          LATEST_LSB = * + 1
   184                          LATEST_MSB = * + 3
   185  1b36 a9d6a09c4c750b         +VALUE	__LATEST
   186                          ; ALL CONTENTS BELOW LATEST WILL BE OVERWRITTEN!!!
   187                          
   188                          
   189                          load_base
   190  1b3d a95e                   lda #<QUIT
   191  1b3f 8d730b                 sta _START
   192  1b42 a910                   lda #>QUIT
   193  1b44 8d740b                 sta _START+1
   194  1b47 ca                     dex
   195  1b48 ca                     dex
   196  1b49 a95b                   lda #<basename
   197  1b4b 953c                   sta LSB+1, x
   198  1b4d a91b                   lda #>basename
   199  1b4f 9574                   sta MSB+1, x
   200  1b51 a904                   lda #(basename_end - basename)
   201  1b53 953b                   sta LSB,x
   202  1b55 20991a                 jsr INCLUDED
   203  1b58 4c6610                 jmp interpret_loop
   204                          
   205                          basename
   206  1b5b 42415345           !text	"base"
   207                          basename_end
